name: Default - Release
on:
  push:
    tags:
      - 'sdks/v*.*.*'
  workflow_call:
    secrets:
      NUMARY_GITHUB_TOKEN:
        required: true
        description: GitHub token with access to the repo
#      PYPI_SECRET:
#        required: true
#      NPM_TOKEN:
#        required: true

jobs:
  Sdk:
    name: 'Generate and publish sdks'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Update SDKS
      run: |
        set -x;

        echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token;

        #task openapi:sdk:build;
        #[ "$(git diff)" == "" ] || {
        #  echo "OpenAPI spec computation give changes, please update SDKS before push code";
        #  git diff;
        #  exit 1;
        #}

        #task openapi:sdk:generate:all;
        #[ "$(git diff)" == "" ] || {
        #  echo "OpenAPI code generation give changes, please update SDKS before push code";
        #  git diff;
        #  exit 1;
        #}

        versionFromSpec=$(jq -r '.info.version' ./openapi/build/generate.json);
        versionFromTag=$(echo $GITHUB_REF_NAME | cut -d / -f 2);
        [ "$versionFromSpec" == "$versionFromTag" ] || {
          echo "Versions from spec and tag mismatch, please update SDKS before push code";
          exit 1;
        }
        #task openapi:sdk:test:all;
        
        export TWINE_USERNAME=__token__
        export TWINE_PASSWORD=${{ secrets.PYPI_SECRET }}
        
        #         gpg_private_key: ${{ secrets.GPG_SIGNING_KEY }}
        #  gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
        
        echo secret: ${{ secrets.GPG_SIGNING_KEY }}
        echo ${{ secrets.GPG_SIGNING_KEY }} > /tmp/gpg_signing_key
        cat /tmp/gpg_signing_key
        gpg --import --batch /tmp/gpg_signing_key
        
        mkdir ~/.m2
        cat <<EOF > ~/.m2/settings.xml
        <?xml version="1.0" encoding="UTF-8" ?>
        <!-- Maven settings for CI -->
        <settings
        xmlns="http://maven.apache.org/SETTINGS/1.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"
        >
        <profiles>
        <!-- GPG settings -->
        <profile>
        <id>gpg</id>
        <activation>
        <activeByDefault>true</activeByDefault>
        </activation>
        <properties>
        <gpg.executable>gpg</gpg.executable>
        <!-- Load passphrase from env variable -->
        <gpg.passphrase>${{ secrets.GPG_PASSPHRASE }}</gpg.passphrase>
        </properties>
        </profile>
        </profiles>
        
        <servers>
        <!-- Sonatype OSSRH credentials -->
        <server>
        <id>ossrh</id>
        <!-- Load credentials from env variables -->
        <username>${{ secrets.OSSRH_USERNAME }}</username>
        <password>${{ secrets.OSSRH_PASSWORD }}</password>
        </server>
        </servers>
        </settings>
        EOF
        
        cat ~/.m2/settings.xml

        for sdk in $(ls sdks); do
          pushd sdks/$sdk;
          sudo chown -Rf runner:runner .
          git init;
          git remote add origin https://${{ secrets.NUMARY_GITHUB_TOKEN }}:${{ secrets.NUMARY_GITHUB_TOKEN }}@github.com/formancehq/formance-sdk-$sdk.git
          git config --global user.email "maxence@formance.com"
          git config --global user.name "Maxence Maireaux"
          git checkout -b release/$versionFromSpec;
          git add -A;
          git commit -m "feat: Upgrade to version $versionFromSpec";
          git push -f origin release/$versionFromSpec;
          git tag $versionFromSpec;
          git push -f origin $versionFromSpec;
          popd;
        done

        task openapi:sdk:publish:all
