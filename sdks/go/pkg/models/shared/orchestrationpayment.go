// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"math/big"
	"time"
)

type OrchestrationPaymentScheme string

const (
	OrchestrationPaymentSchemeVisa       OrchestrationPaymentScheme = "visa"
	OrchestrationPaymentSchemeMastercard OrchestrationPaymentScheme = "mastercard"
	OrchestrationPaymentSchemeAmex       OrchestrationPaymentScheme = "amex"
	OrchestrationPaymentSchemeDiners     OrchestrationPaymentScheme = "diners"
	OrchestrationPaymentSchemeDiscover   OrchestrationPaymentScheme = "discover"
	OrchestrationPaymentSchemeJcb        OrchestrationPaymentScheme = "jcb"
	OrchestrationPaymentSchemeUnionpay   OrchestrationPaymentScheme = "unionpay"
	OrchestrationPaymentSchemeSepaDebit  OrchestrationPaymentScheme = "sepa debit"
	OrchestrationPaymentSchemeSepaCredit OrchestrationPaymentScheme = "sepa credit"
	OrchestrationPaymentSchemeSepa       OrchestrationPaymentScheme = "sepa"
	OrchestrationPaymentSchemeApplePay   OrchestrationPaymentScheme = "apple pay"
	OrchestrationPaymentSchemeGooglePay  OrchestrationPaymentScheme = "google pay"
	OrchestrationPaymentSchemeA2a        OrchestrationPaymentScheme = "a2a"
	OrchestrationPaymentSchemeAchDebit   OrchestrationPaymentScheme = "ach debit"
	OrchestrationPaymentSchemeAch        OrchestrationPaymentScheme = "ach"
	OrchestrationPaymentSchemeRtp        OrchestrationPaymentScheme = "rtp"
	OrchestrationPaymentSchemeUnknown    OrchestrationPaymentScheme = "unknown"
	OrchestrationPaymentSchemeOther      OrchestrationPaymentScheme = "other"
)

func (e OrchestrationPaymentScheme) ToPointer() *OrchestrationPaymentScheme {
	return &e
}

func (e *OrchestrationPaymentScheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "visa":
		fallthrough
	case "mastercard":
		fallthrough
	case "amex":
		fallthrough
	case "diners":
		fallthrough
	case "discover":
		fallthrough
	case "jcb":
		fallthrough
	case "unionpay":
		fallthrough
	case "sepa debit":
		fallthrough
	case "sepa credit":
		fallthrough
	case "sepa":
		fallthrough
	case "apple pay":
		fallthrough
	case "google pay":
		fallthrough
	case "a2a":
		fallthrough
	case "ach debit":
		fallthrough
	case "ach":
		fallthrough
	case "rtp":
		fallthrough
	case "unknown":
		fallthrough
	case "other":
		*e = OrchestrationPaymentScheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrchestrationPaymentScheme: %v", v)
	}
}

type OrchestrationPaymentType string

const (
	OrchestrationPaymentTypePayIn    OrchestrationPaymentType = "PAY-IN"
	OrchestrationPaymentTypePayout   OrchestrationPaymentType = "PAYOUT"
	OrchestrationPaymentTypeTransfer OrchestrationPaymentType = "TRANSFER"
	OrchestrationPaymentTypeOther    OrchestrationPaymentType = "OTHER"
)

func (e OrchestrationPaymentType) ToPointer() *OrchestrationPaymentType {
	return &e
}

func (e *OrchestrationPaymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAY-IN":
		fallthrough
	case "PAYOUT":
		fallthrough
	case "TRANSFER":
		fallthrough
	case "OTHER":
		*e = OrchestrationPaymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrchestrationPaymentType: %v", v)
	}
}

type OrchestrationPayment struct {
	Adjustments          []PaymentAdjustment        `json:"adjustments"`
	Asset                string                     `json:"asset"`
	ConnectorID          string                     `json:"connectorID"`
	CreatedAt            time.Time                  `json:"createdAt"`
	DestinationAccountID string                     `json:"destinationAccountID"`
	ID                   string                     `json:"id"`
	InitialAmount        *big.Int                   `json:"initialAmount"`
	Metadata             PaymentMetadata            `json:"metadata"`
	Provider             *Connector                 `json:"provider,omitempty"`
	Raw                  map[string]interface{}     `json:"raw"`
	Reference            string                     `json:"reference"`
	Scheme               OrchestrationPaymentScheme `json:"scheme"`
	SourceAccountID      string                     `json:"sourceAccountID"`
	Status               PaymentStatus              `json:"status"`
	Type                 OrchestrationPaymentType   `json:"type"`
}
