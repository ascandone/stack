http:
  enabled: true
  address: 0.0.0.0:4195

tracer:
  jaeger:
    agent_address: "${JAEGER_COLLECTOR}"
    service_name: search-ingester

input:
  broker:
    inputs:
    - http_server:
        path: /
        allowed_verbs:
        - POST

pipeline:
  processors:
    - json_schema:
        schema: '{"type": "object"}'
    - catch:
      - log:
          level: ERROR
          message: "Schema validation failed due to: ${!error()}"
      - bloblang: root = deleted()
    - switch:
      - check: this.type == "SAVED_METADATA"
        processors:
        - bloblang: |
            import "./saved_metadata.blobl"
            root = this.apply("savedMetadata")
      - check: this.type == "COMMITTED_TRANSACTIONS"
        processors:
        - bloblang: |
            import "./committed_transactions.blobl"
            root = this.apply("committedTransactions")
      - check: this.type == "SAVED_PAYMENT"
        processors:
        - bloblang: |
            import "./saved_payment.blobl"
            root = this.apply("savedPayment")
      - processors:
        - bloblang: |
            root = deleted()
    - catch:
      - bloblang: root = deleted()
output:
  processors:
  - bloblang: |
      root = "%s\n".format(this.map_each(v -> v.string()).join("\n"))
  broker:
    outputs:
      - stdout: {}
      - http_client:
          url: ${OPENSEARCH_URL}/_bulk
          verb: POST
          headers:
            Content-Type: application/x-ndjson
          tls:
            enabled: ${HTTP_CLIENT_TLS_ENABLED}
            skip_cert_verify: ${HTTP_CLIENT_TLS_SKIP_CERT_VERIFY}
          basic_auth:
            enabled: ${BASIC_AUTH_ENABLED}
            username: ${BASIC_AUTH_USERNAME}
            password: ${BASIC_AUTH_PASSWORD}
