---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.serviceName }}-ingest
  name: {{ .Values.serviceName }}-ingest
spec:
  replicas: 1
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ .Values.serviceName }}-ingest
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/ingester-configmap.yaml") . | sha256sum }}
        ad.datadoghq.com/{{ .Values.serviceName }}.logs: '[{"source":"kubernetes","service":"{{ .Values.serviceName }}"}]'
      labels:
        app: {{ .Values.serviceName }}-ingest
        tags.datadoghq.com/{{ .Values.serviceName }}-ingest.service: "{{ .Values.serviceName }}-ingest"
    spec:
      serviceAccountName: {{ .Values.serviceName }}-cluster-secret-manager
      volumes:
        - name: config
          configMap:
            name: {{ .Values.serviceName }}-ingest-config
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.serviceName }}-secret-provider-class
      containers:
      - image: "jeffail/benthos:3.65"
        name: "benthos"
        workingDir: "/config"
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: /config
            name: config
          - name: secrets-store-inline
            mountPath: '/mnt/secrets'
            readOnly: true
        command:
        - /benthos
        - -w
        - -c
        - /config/config.yml
        env:
        - name: INDEX
          value: "ledger"
        - name: HTTP_CLIENT_TLS_ENABLED
          value: "true"
        - name: KAFKA_ADDRESS
          {{ if not .Values.resource.ephemeral }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.serviceName }}-service-secrets
              key: KAFKA_HOST
          {{ else }}
          value: "{{.Values.kafka.address}}"
          {{ end }}
        - name: KAFKA_TOPIC
          value: "{{.Values.kafka.topic}}"
        - name: KAFKA_TLS_ENABLED
          value: "{{.Values.kafka.tls.enabled}}"
        - name: KAFKA_SASL_ENABLED
          value: "{{.Values.kafka.sasl.enabled}}"
        - name: KAFKA_SASL_MECHANISM
          value: "{{.Values.kafka.sasl.mechanism}}"
        - name: KAFKA_SASL_USER
          {{ if not .Values.resource.ephemeral }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.serviceName }}-service-secrets
              key: KAFKA_USER_NAME
          {{ else }}
          value: "{{.Values.kafka.sasl.user}}"
          {{ end }}
        - name: KAFKA_SASL_PASSWORD
          {{ if not .Values.resource.ephemeral }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.serviceName }}-service-secrets
              key: KAFKA_USER_PASSWORD
          {{ else }}
          value: "{{.Values.kafka.sasl.password}}"
          {{ end }}
        - name: HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: JAEGER_COLLECTOR
          value: $(HOST):14268
        ports:
        - containerPort: 8080
          name: {{ .Values.serviceName }}-ingest
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 500m
            memory: 512Mi
