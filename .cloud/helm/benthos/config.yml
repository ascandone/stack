http:
  enabled: true
  address: 0.0.0.0:4195

tracer:
  jaeger:
    agent_address: "${JAEGER_COLLECTOR}"

input:
  broker:
    inputs:
    - http_server:
        path: /
    - kafka:
        addresses:
        - ${KAFKA_ADDRESS}
        topics:
        - ${KAFKA_TOPIC}
        client_id: webhooks-benthos-ingest
        tls:
          enabled: ${KAFKA_TLS_ENABLED}
        sasl:
          user: ${KAFKA_SASL_USER}
          password: ${KAFKA_SASL_PASSWORD}
          mechanism: "SCRAM-SHA-512"

pipeline:
  processors:
    - json_schema:
        schema: '{"type": "object"}'
    - catch:
        - log:
            level: ERROR
            message: "message deleted: invalid JSON format: ${!error()}"
            fields_mapping: |-
              root._status = "Deleted"
              root._error = "ErrInvalidJSON"
        - bloblang: root = if errored() { deleted() }

    - bloblang: |
        root = this
        meta organization = match {
          meta("organization") != null => meta("organization")
          meta("Organization") != null => meta("Organization")
          meta("Message-Metadata") != null && meta("Message-Metadata").parse_json().organization != null => meta("Message-Metadata").parse_json().organization
          this.type == "CREATED_ORGANIZATION" && this.exists("payload.organization.id") => this.payload.organization.id
          this.type == "DELETED_ORGANIZATION" && this.exists("id") => this.id
          _ => throw("missing organization")
        }
    - catch:
        - log:
            level: ERROR
            message: "message deleted: ${!error()}"
            fields_mapping: |-
              root._status = "Deleted"
              root._error = "ErrMissingOrganization"
        - bloblang: root = if errored() { deleted() }

    - log:
        level: INFO
        message: "message passed pipeline successfully"
        fields_mapping: |-
          root = this
          root._status = "Succeeded"
          root._error = ""

output:
  switch:
    cases:
      - check: this.type == "CREATED_ORGANIZATION"
        output:
          http_client:
            url: https://api.eu.svix.com/api/v1/app/
            verb: POST
            propagate_response: true
            headers:
              Content-Type: application/json
              Authorization: "Bearer ${SVIX_API_KEY_DEV}"
          processors:
            - bloblang: |
                root.uid = meta("organization")
                root.name = "%s (%s)".format(this.payload.organization.name, meta("organization"))
                root.rateLimit = 1000
            - log:
                level: INFO
                message: Svix app created
                fields_mapping: root = this

      - check: this.type == "DELETED_ORGANIZATION"
        output:
          http_client:
            url: https://api.eu.svix.com/api/v1/app/${! meta("organisation") }/
            verb: DELETE
            propagate_response: true
            headers:
              Content-Type: application/json
              Authorization: "Bearer ${SVIX_API_KEY_DEV}"
          processors:
            - log:
                level: INFO
                message: Svix app deleted
                fields_mapping: root = this

      - output:
          stdout: {}
