components:
    parameters:
        AccountId:
            description: The account ID.
            example: XXX
            in: path
            name: accountId
            required: true
            schema:
                type: string
        BankAccountId:
            description: The bank account ID.
            example: XXX
            in: path
            name: bankAccountId
            required: true
            schema:
                type: string
        Connector:
            description: The name of the connector.
            in: path
            name: connector
            required: true
            schema:
                $ref: '#/components/schemas/Connector'
        ConnectorID:
            description: The connector ID.
            example: XXX
            in: path
            name: connectorId
            required: true
            schema:
                type: string
        Cursor:
            description: |
                Parameter used in pagination requests. Maximum page size is set to 15.
                Set to the value of next for the next page of results.
                Set to the value of previous for the previous page of results.
                No other parameters can be set when this parameter is set.
            in: query
            name: cursor
            schema:
                example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
                type: string
        PageSize:
            description: |
                The maximum number of results to return per page.
            example: 100
            in: query
            name: pageSize
            schema:
                default: 15
                format: int64
                maximum: 1000
                minimum: 1
                type: integer
        PaymentId:
            description: The payment ID.
            example: XXX
            in: path
            name: paymentId
            required: true
            schema:
                type: string
        Query:
            description: |
                Filters used to filter resources.
            in: query
            name: query
            schema:
                type: string
        Sort:
            description: Fields used to sort payments (default is date:desc).
            example:
                - date:asc
                - status:desc
            in: query
            name: sort
            schema:
                items:
                    type: string
                type: array
        TaskId:
            description: The task ID.
            example: task1
            in: path
            name: taskId
            required: true
            schema:
                type: string
        TransferId:
            description: The transfer ID.
            example: XXX
            in: path
            name: transferId
            required: true
            schema:
                type: string
    requestBodies:
        BankAccount:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BankAccountRequest'
            required: true
        ConnectorConfig:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ConnectorConfig'
            required: true
        Transfer:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TransferRequest'
            required: true
        TransferInitiation:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TransferInitiationRequest'
            required: true
        UpdateMetadata:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PaymentMetadata'
            required: true
        UpdateTransferInitiationStatus:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateTransferInitiationStatusRequest'
            required: true
    responses:
        Account:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/AccountResponse'
            description: OK
        AccountBalances:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BalancesCursor'
            description: OK
        Accounts:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/AccountsCursor'
            description: OK
        BankAccount:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BankAccountResponse'
            description: OK
        BankAccounts:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BankAccountsCursor'
            description: OK
        ConnectorConfig:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ConnectorConfigResponse'
            description: OK
        ConnectorInstalled:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ConnectorResponse'
            description: OK
        Connectors:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ConnectorsResponse'
            description: OK
        ConnectorsConfigs:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ConnectorsConfigsResponse'
            description: OK
        ErrorResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
            description: General error
        NoContent:
            description: No content
        Payment:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PaymentResponse'
            description: OK
        Payments:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PaymentsCursor'
            description: OK
        ServerInfo:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServerInfo'
            description: Server information
        Task:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TaskResponse'
            description: OK
        Tasks:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TasksCursor'
            description: OK
        Transfer:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TransferResponse'
            description: OK
        TransferInitiation:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TransferInitiationResponse'
            description: OK
        TransferInitiations:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TransferInitiationsCursor'
            description: OK
        Transfers:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TransfersResponse'
            description: OK
    schemas:
        Account:
            properties:
                accountName:
                    type: string
                connectorID:
                    type: string
                createdAt:
                    format: date-time
                    type: string
                defaultAsset:
                    type: string
                defaultCurrency:
                    deprecated: true
                    type: string
                id:
                    type: string
                raw:
                    nullable: true
                    type: object
                reference:
                    type: string
                type:
                    type: string
            required:
                - id
                - createdAt
                - reference
                - connectorID
                - defaultCurrency
                - defaultAsset
                - accountName
                - type
                - raw
            type: object
        AccountBalance:
            properties:
                accountId:
                    type: string
                asset:
                    type: string
                balance:
                    format: bigint
                    type: integer
                createdAt:
                    format: date-time
                    type: string
                currency:
                    deprecated: true
                    type: string
                lastUpdatedAt:
                    format: date-time
                    type: string
            required:
                - accountId
                - createdAt
                - lastUpdatedAt
                - currency
                - asset
                - balance
            type: object
        AccountResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Account'
            required:
                - data
            type: object
        AccountResponseV2:
            properties:
                data:
                    $ref: '#/components/schemas/AccountV2'
            required:
                - data
            type: object
        AccountV2:
            properties:
                address:
                    example: users:001
                    type: string
                effectiveVolumes:
                    $ref: '#/components/schemas/VolumesV2'
                metadata:
                    additionalProperties:
                        type: string
                    example:
                        admin: "true"
                    type: object
                volumes:
                    $ref: '#/components/schemas/VolumesV2'
            required:
                - address
                - metadata
            type: object
        AccountsBalancesV2:
            additionalProperties:
                $ref: '#/components/schemas/AssetsBalancesV2'
            example:
                account1:
                    EUR: 23
                    USD: 100
                account2:
                    CAD: 20
                    JPY: 21
            type: object
        AccountsCursor:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/CursorBase'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/Account'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        AccountsCursorResponseV2:
            properties:
                cursor:
                    properties:
                        data:
                            items:
                                $ref: '#/components/schemas/AccountV2'
                            type: array
                        hasMore:
                            example: false
                            type: boolean
                        next:
                            example: ""
                            type: string
                        pageSize:
                            example: 15
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        previous:
                            example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
                            type: string
                    required:
                        - pageSize
                        - hasMore
                        - data
                    type: object
            required:
                - cursor
            type: object
        ActivityConfirmHold:
            properties:
                id:
                    type: string
            required:
                - id
            type: object
        ActivityCreateTransaction:
            properties:
                data:
                    $ref: '#/components/schemas/PostTransaction'
                ledger:
                    type: string
            type: object
        ActivityCreateTransactionOutput:
            $ref: '#/components/schemas/CreateTransactionResponse'
        ActivityCreditWallet:
            properties:
                data:
                    $ref: '#/components/schemas/CreditWalletRequest'
                id:
                    type: string
            type: object
        ActivityDebitWallet:
            properties:
                data:
                    $ref: '#/components/schemas/DebitWalletRequest'
                id:
                    type: string
            type: object
        ActivityDebitWalletOutput:
            $ref: '#/components/schemas/DebitWalletResponse'
        ActivityGetAccount:
            properties:
                id:
                    type: string
                ledger:
                    type: string
            required:
                - id
                - ledger
            type: object
        ActivityGetAccountOutput:
            $ref: '#/components/schemas/AccountResponse'
        ActivityGetPayment:
            properties:
                id:
                    type: string
            required:
                - id
            type: object
        ActivityGetPaymentOutput:
            $ref: '#/components/schemas/PaymentResponse'
        ActivityGetWallet:
            properties:
                id:
                    type: string
            required:
                - id
            type: object
        ActivityGetWalletOutput:
            $ref: '#/components/schemas/GetWalletResponse'
        ActivityRevertTransaction:
            properties:
                id:
                    type: string
                ledger:
                    type: string
            required:
                - id
                - ledger
            type: object
        ActivityRevertTransactionOutput:
            $ref: '#/components/schemas/RevertTransactionResponse'
        ActivityStripeTransfer:
            $ref: '#/components/schemas/StripeTransferRequest'
        ActivityVoidHold:
            properties:
                id:
                    type: string
            required:
                - id
            type: object
        AggregateBalancesResponseV2:
            properties:
                data:
                    $ref: '#/components/schemas/AssetsBalancesV2'
            required:
                - data
            type: object
        AggregatedVolumes:
            additionalProperties:
                $ref: '#/components/schemas/Volumes'
            type: object
            x-go-type:
                type: AggregatedVolumes
        AggregatedVolumesV2:
            additionalProperties:
                $ref: '#/components/schemas/VolumesV2'
            example:
                orders:1:
                    USD:
                        balance: 90
                        input: 100
                        output: 10
                orders:2:
                    USD:
                        balance: 90
                        input: 100
                        output: 10
            type: object
        AssetHolder:
            properties:
                assets:
                    additionalProperties:
                        format: bigint
                        type: integer
                    type: object
            required:
                - assets
            type: object
        AssetsBalancesV2:
            additionalProperties:
                format: bigint
                type: integer
            example:
                EUR: 12
                USD: 100
            type: object
        Attempt:
            properties:
                config:
                    $ref: '#/components/schemas/Config'
                createdAt:
                    format: date-time
                    type: string
                id:
                    format: uuid
                    type: string
                nextRetryAfter:
                    format: date-time
                    type: string
                payload:
                    example: '{"data":"test"}'
                    type: string
                retryAttempt:
                    example: 1
                    type: integer
                status:
                    example: success
                    type: string
                statusCode:
                    example: 200
                    type: integer
                updatedAt:
                    format: date-time
                    type: string
                webhookID:
                    format: uuid
                    type: string
            required:
                - id
                - webhookID
                - createdAt
                - updatedAt
                - config
                - payload
                - statusCode
                - retryAttempt
                - status
        AttemptResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Attempt'
            required:
                - data
            type: object
        Balance:
            properties:
                expiresAt:
                    format: date-time
                    type: string
                name:
                    type: string
                priority:
                    format: bigint
                    type: integer
            required:
                - name
            type: object
        BalanceWithAssets:
            allOf:
                - $ref: '#/components/schemas/Balance'
                - $ref: '#/components/schemas/AssetHolder'
        BalancesCursor:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/CursorBase'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/AccountBalance'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        BalancesCursorResponseV2:
            properties:
                cursor:
                    properties:
                        data:
                            items:
                                $ref: '#/components/schemas/AccountsBalancesV2'
                            type: array
                        hasMore:
                            example: false
                            type: boolean
                        next:
                            example: ""
                            type: string
                        pageSize:
                            example: 15
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        previous:
                            example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
                            type: string
                    required:
                        - pageSize
                        - hasMore
                        - data
                    type: object
            required:
                - cursor
            type: object
        BankAccount:
            properties:
                accountNumber:
                    type: string
                connectorID:
                    type: string
                country:
                    type: string
                createdAt:
                    format: date-time
                    type: string
                iban:
                    type: string
                id:
                    type: string
                swiftBicCode:
                    type: string
            required:
                - id
                - createdAt
                - country
                - connectorID
            type: object
        BankAccountRequest:
            properties:
                accountNumber:
                    type: string
                connectorID:
                    type: string
                country:
                    example: GB
                    type: string
                iban:
                    type: string
                name:
                    example: My account
                    type: string
                swiftBicCode:
                    type: string
            required:
                - country
                - connectorID
                - name
            type: object
        BankAccountResponse:
            properties:
                data:
                    $ref: '#/components/schemas/BankAccount'
            required:
                - data
            type: object
        BankAccountsCursor:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/CursorBase'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/BankAccount'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        BankingCircleConfig:
            properties:
                authorizationEndpoint:
                    example: XXX
                    type: string
                endpoint:
                    example: XXX
                    type: string
                name:
                    example: My Banking Circle Account
                    type: string
                password:
                    example: XXX
                    type: string
                pollingPeriod:
                    default: 120s
                    description: |
                        The frequency at which the connector will try to fetch new BalanceTransaction objects from Banking Circle API.
                    example: 60s
                    type: string
                userCertificate:
                    example: XXX
                    type: string
                userCertificateKey:
                    example: XXX
                    type: string
                username:
                    example: XXX
                    type: string
            required:
                - name
                - username
                - password
                - endpoint
                - authorizationEndpoint
                - userCertificate
                - userCertificateKey
            type: object
        BaseBulkElementResultV2:
            properties:
                responseType:
                    type: string
            required:
                - responseType
            type: object
        BaseBulkElementV2:
            properties:
                action:
                    type: string
                ik:
                    type: string
            required:
                - action
            type: object
        BulkElementAddMetadataV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementV2'
                - properties:
                    data:
                        properties:
                            metadata:
                                additionalProperties:
                                    type: string
                                type: object
                            targetId:
                                $ref: '#/components/schemas/TargetIdV2'
                            targetType:
                                $ref: '#/components/schemas/TargetTypeV2'
                        required:
                            - targetId
                            - targetType
                            - metadata
                        type: object
                  type: object
            type: object
        BulkElementCreateTransactionV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementV2'
                - properties:
                    data:
                        $ref: '#/components/schemas/PostTransactionV2'
                  type: object
            type: object
        BulkElementDeleteMetadataV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementV2'
                - properties:
                    data:
                        properties:
                            key:
                                type: string
                            targetId:
                                $ref: '#/components/schemas/TargetIdV2'
                            targetType:
                                $ref: '#/components/schemas/TargetTypeV2'
                        required:
                            - targetId
                            - targetType
                            - key
                  type: object
            type: object
        BulkElementResultAddMetadataV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementResultV2'
        BulkElementResultCreateTransactionV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementResultV2'
                - properties:
                    data:
                        $ref: '#/components/schemas/TransactionV2'
                  required:
                    - data
                  type: object
        BulkElementResultDeleteMetadataV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementResultV2'
        BulkElementResultErrorV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementResultV2'
                - properties:
                    errorCode:
                        type: string
                    errorDescription:
                        type: string
                    errorDetails:
                        type: string
                  required:
                    - errorCode
                    - errorDescription
                  type: object
        BulkElementResultRevertTransactionV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementResultV2'
                - properties:
                    data:
                        $ref: '#/components/schemas/TransactionV2'
                  required:
                    - data
                  type: object
        BulkElementResultV2:
            discriminator:
                mapping:
                    ADD_METADATA: '#/components/schemas/BulkElementResultAddMetadata'
                    CREATE_TRANSACTION: '#/components/schemas/BulkElementResultCreateTransaction'
                    DELETE_METADATA: '#/components/schemas/BulkElementResultDeleteMetadata'
                    ERROR: '#/components/schemas/BulkElementResultError'
                    REVERT_TRANSACTION: '#/components/schemas/BulkElementResultRevertTransaction'
                propertyName: responseType
            oneOf:
                - $ref: '#/components/schemas/BulkElementResultCreateTransactionV2'
                - $ref: '#/components/schemas/BulkElementResultAddMetadataV2'
                - $ref: '#/components/schemas/BulkElementResultRevertTransactionV2'
                - $ref: '#/components/schemas/BulkElementResultDeleteMetadataV2'
                - $ref: '#/components/schemas/BulkElementResultErrorV2'
            type: object
        BulkElementRevertTransactionV2:
            allOf:
                - $ref: '#/components/schemas/BaseBulkElementV2'
                - properties:
                    data:
                        properties:
                            force:
                                type: boolean
                            id:
                                format: bigint
                                type: integer
                        required:
                            - id
                  type: object
            type: object
        BulkElementV2:
            discriminator:
                mapping:
                    ADD_METADATA: '#/components/schemas/BulkElementAddMetadata'
                    CREATE_TRANSACTION: '#/components/schemas/BulkElementCreateTransaction'
                    DELETE_METADATA: '#/components/schemas/BulkElementDeleteMetadata'
                    REVERT_TRANSACTION: '#/components/schemas/BulkElementRevertTransaction'
                propertyName: action
            oneOf:
                - $ref: '#/components/schemas/BulkElementCreateTransactionV2'
                - $ref: '#/components/schemas/BulkElementAddMetadataV2'
                - $ref: '#/components/schemas/BulkElementRevertTransactionV2'
                - $ref: '#/components/schemas/BulkElementDeleteMetadataV2'
            type: object
        BulkResponseV2:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/BulkElementResultV2'
                    type: array
            required:
                - data
            type: object
        BulkV2:
            items:
                $ref: '#/components/schemas/BulkElementV2'
            type: array
        Client:
            allOf:
                - $ref: '#/components/schemas/ClientOptions'
                - properties:
                    id:
                        type: string
                    scopes:
                        items:
                            type: string
                        type: array
                    secrets:
                        items:
                            $ref: '#/components/schemas/ClientSecret'
                        type: array
                  required:
                    - id
                  type: object
        ClientOptions:
            properties:
                description:
                    type: string
                metadata:
                    $ref: '#/components/schemas/Metadata'
                name:
                    type: string
                postLogoutRedirectUris:
                    items:
                        type: string
                    type: array
                public:
                    type: boolean
                redirectUris:
                    items:
                        type: string
                    type: array
                trusted:
                    type: boolean
            required:
                - name
            type: object
        ClientSecret:
            properties:
                id:
                    type: string
                lastDigits:
                    type: string
                metadata:
                    $ref: '#/components/schemas/Metadata'
                name:
                    type: string
            required:
                - id
                - lastDigits
                - name
            type: object
        Config:
            properties:
                active:
                    example: true
                    type: boolean
                createdAt:
                    format: date-time
                    type: string
                endpoint:
                    example: https://example.com
                    type: string
                eventTypes:
                    example:
                        - TYPE1
                        - TYPE2
                    items:
                        example: TYPE1
                        type: string
                    type: array
                id:
                    format: uuid
                    type: string
                secret:
                    example: V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3
                    type: string
                updatedAt:
                    format: date-time
                    type: string
            required:
                - id
                - endpoint
                - secret
                - eventTypes
                - active
                - createdAt
                - updatedAt
        ConfigChangeSecret:
            properties:
                secret:
                    example: V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3
                    type: string
            required:
                - secret
            type: object
        ConfigInfoResponseV2:
            $ref: '#/components/schemas/ConfigInfoV2'
        ConfigInfoV2:
            properties:
                config:
                    $ref: '#/components/schemas/ConfigV2'
                server:
                    type: string
                version:
                    type: string
            required:
                - config
                - server
                - version
            type: object
        ConfigResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Config'
            required:
                - data
            type: object
        ConfigUser:
            properties:
                endpoint:
                    example: https://example.com
                    type: string
                eventTypes:
                    example:
                        - TYPE1
                        - TYPE2
                    items:
                        example: TYPE1
                        type: string
                    type: array
                secret:
                    example: V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3
                    type: string
            required:
                - endpoint
                - eventTypes
            type: object
        ConfigV2:
            properties:
                storage:
                    $ref: '#/components/schemas/LedgerStorageV2'
            required:
                - storage
            type: object
        ConfigsResponse:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/Cursor'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/Config'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        ConfirmHoldRequest:
            properties:
                amount:
                    description: Define the amount to transfer.
                    example: 100
                    format: bigint
                    type: integer
                final:
                    description: Define a final confirmation. Remaining funds will be returned to the wallet.
                    example: true
                    type: boolean
            type: object
        Connector:
            enum:
                - STRIPE
                - DUMMY-PAY
                - WISE
                - MODULR
                - CURRENCY-CLOUD
                - BANKING-CIRCLE
                - MANGOPAY
                - MONEYCORP
            type: string
        ConnectorConfig:
            anyOf:
                - $ref: '#/components/schemas/StripeConfig'
                - $ref: '#/components/schemas/DummyPayConfig'
                - $ref: '#/components/schemas/WiseConfig'
                - $ref: '#/components/schemas/ModulrConfig'
                - $ref: '#/components/schemas/CurrencyCloudConfig'
                - $ref: '#/components/schemas/BankingCircleConfig'
                - $ref: '#/components/schemas/MangoPayConfig'
                - $ref: '#/components/schemas/MoneycorpConfig'
        ConnectorConfigResponse:
            properties:
                data:
                    $ref: '#/components/schemas/ConnectorConfig'
            required:
                - data
            type: object
        ConnectorResponse:
            properties:
                data:
                    properties:
                        connectorID:
                            type: string
                    required:
                        - connectorID
                    type: object
            required:
                - data
            type: object
        ConnectorsConfigsResponse:
            properties:
                data:
                    properties:
                        connector:
                            properties:
                                key:
                                    properties:
                                        dataType:
                                            type: string
                                        required:
                                            type: boolean
                                    required:
                                        - dataType
                                        - required
                                    type: object
                            required:
                                - key
                            type: object
                    required:
                        - connector
                    type: object
            required:
                - data
            type: object
        ConnectorsResponse:
            properties:
                data:
                    items:
                        properties:
                            connectorID:
                                type: string
                            name:
                                type: string
                            provider:
                                $ref: '#/components/schemas/Connector'
                        required:
                            - provider
                            - name
                            - connectorID
                        type: object
                    type: array
            required:
                - data
            type: object
        CreateBalanceRequest:
            $ref: '#/components/schemas/Balance'
        CreateBalanceResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Balance'
            required:
                - data
            type: object
        CreateClientRequest:
            $ref: '#/components/schemas/ClientOptions'
        CreateClientResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Client'
            type: object
        CreateScopeRequest:
            $ref: '#/components/schemas/ScopeOptions'
        CreateScopeResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Scope'
            type: object
        CreateSecretRequest:
            $ref: '#/components/schemas/SecretOptions'
        CreateSecretResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Secret'
            type: object
        CreateTransactionResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Transaction'
            required:
                - data
            type: object
        CreateTransactionResponseV2:
            properties:
                data:
                    $ref: '#/components/schemas/TransactionV2'
            required:
                - data
            type: object
        CreateWalletRequest:
            properties:
                metadata:
                    additionalProperties:
                        type: string
                    description: Custom metadata to attach to this wallet.
                    type: object
                name:
                    type: string
            required:
                - name
                - metadata
            type: object
        CreateWalletResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Wallet'
            required:
                - data
            type: object
        CreateWorkflowRequest:
            $ref: '#/components/schemas/WorkflowConfig'
        CreateWorkflowResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Workflow'
            required:
                - data
            type: object
        CreditWalletRequest:
            example:
                amount:
                    amount: 100
                    asset: USD/2
                metadata:
                    key: ""
                sources: []
            properties:
                amount:
                    $ref: '#/components/schemas/Monetary'
                balance:
                    description: The balance to credit
                    type: string
                metadata:
                    additionalProperties:
                        type: string
                    description: Metadata associated with the wallet.
                    type: object
                reference:
                    type: string
                sources:
                    items:
                        $ref: '#/components/schemas/Subject'
                    type: array
            required:
                - amount
                - sources
                - metadata
            type: object
        CurrencyCloudConfig:
            properties:
                apiKey:
                    example: XXX
                    type: string
                endpoint:
                    description: The endpoint to use for the API. Defaults to https://devapi.currencycloud.com
                    example: XXX
                    type: string
                loginID:
                    description: Username of the API Key holder
                    example: XXX
                    type: string
                name:
                    example: My CurrencyCloud Account
                    type: string
                pollingPeriod:
                    default: 120s
                    description: The frequency at which the connector will fetch transactions
                    example: 60s
                    type: string
            required:
                - name
                - apiKey
                - loginID
            type: object
        Cursor:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/Config'
                    type: array
                hasMore:
                    example: false
                    type: boolean
            required:
                - hasMore
                - data
            type: object
        CursorBase:
            properties:
                hasMore:
                    example: false
                    type: boolean
                next:
                    example: ""
                    type: string
                pageSize:
                    example: 15
                    format: int64
                    maximum: 1000
                    minimum: 1
                    type: integer
                previous:
                    example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
                    type: string
            required:
                - pageSize
                - hasMore
                - data
            type: object
        DebitWalletRequest:
            example:
                amount:
                    amount: 100
                    asset: USD/2
                metadata:
                    key: ""
                pending: true
            properties:
                amount:
                    $ref: '#/components/schemas/Monetary'
                balances:
                    items:
                        description: A targeted balance (use '*' for all)
                        type: string
                    type: array
                description:
                    type: string
                destination:
                    $ref: '#/components/schemas/Subject'
                metadata:
                    additionalProperties:
                        type: string
                    description: Metadata associated with the wallet.
                    type: object
                pending:
                    description: Set to true to create a pending hold. If false, the wallet will be debited immediately.
                    type: boolean
            required:
                - amount
                - metadata
            type: object
        DebitWalletResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Hold'
            required:
                - data
            type: object
        DummyPayConfig:
            properties:
                directory:
                    example: /tmp/dummypay
                    type: string
                fileGenerationPeriod:
                    default: 10s
                    description: The frequency at which the connector will create new payment objects in the directory
                    example: 60s
                    type: string
                filePollingPeriod:
                    default: 10s
                    description: The frequency at which the connector will try to fetch new payment objects from the directory
                    example: 60s
                    type: string
                name:
                    example: My DummyPay Account
                    type: string
            required:
                - name
                - directory
            type: object
        Error:
            properties:
                errorCode:
                    enum:
                        - VALIDATION
                        - NOT_FOUND
                    type: string
                errorMessage:
                    type: string
            required:
                - errorCode
                - errorMessage
            type: object
        ErrorResponse:
            properties:
                details:
                    example: https://play.numscript.org/?payload=eyJlcnJvciI6ImFjY291bnQgaGFkIGluc3VmZmljaWVudCBmdW5kcyJ9
                    type: string
                errorCode:
                    $ref: '#/components/schemas/ErrorsEnum'
                errorMessage:
                    example: '[VALIDATION] invalid ''cursor'' query param'
                    type: string
            required:
                - errorCode
                - errorMessage
            type: object
        ErrorResponseV2:
            properties:
                details:
                    example: https://play.numscript.org/?payload=eyJlcnJvciI6ImFjY291bnQgaGFkIGluc3VmZmljaWVudCBmdW5kcyJ9
                    type: string
                errorCode:
                    $ref: '#/components/schemas/ErrorsEnumV2'
                errorMessage:
                    example: '[VALIDATION] invalid ''cursor'' query param'
                    type: string
            required:
                - errorCode
                - errorMessage
            type: object
        ErrorsEnum:
            enum:
                - INTERNAL
                - VALIDATION
                - NOT_FOUND
            example: VALIDATION
            type: string
        ErrorsEnumV2:
            enum:
                - INTERNAL
                - INSUFFICIENT_FUND
                - VALIDATION
                - CONFLICT
                - COMPILATION_FAILED
                - METADATA_OVERRIDE
                - NOT_FOUND
                - REVERT_OCCURRING
                - ALREADY_REVERT
                - NO_POSTINGS
            example: VALIDATION
            type: string
        ExpandedDebitHold:
            allOf:
                - $ref: '#/components/schemas/Hold'
                - properties:
                    originalAmount:
                        description: Original amount on hold
                        example: 100
                        format: bigint
                        type: integer
                    remaining:
                        description: Remaining amount on hold
                        example: 10
                        format: bigint
                        type: integer
                  required:
                    - remaining
                    - originalAmount
                  type: object
        ExpandedTransactionV2:
            allOf:
                - $ref: '#/components/schemas/TransactionV2'
                - properties:
                    postCommitVolumes:
                        $ref: '#/components/schemas/AggregatedVolumesV2'
                    preCommitVolumes:
                        $ref: '#/components/schemas/AggregatedVolumesV2'
                  type: object
        GetBalanceResponse:
            properties:
                data:
                    $ref: '#/components/schemas/BalanceWithAssets'
            required:
                - data
            type: object
        GetHoldResponse:
            properties:
                data:
                    $ref: '#/components/schemas/ExpandedDebitHold'
            required:
                - data
            type: object
        GetHoldsResponse:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/Cursor'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/Hold'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        GetTransactionResponseV2:
            properties:
                data:
                    $ref: '#/components/schemas/ExpandedTransactionV2'
            required:
                - data
            type: object
        GetTransactionsResponse:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/Cursor'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/Transaction'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        GetVersionsResponse:
            properties:
                env:
                    type: string
                region:
                    type: string
                versions:
                    items:
                        $ref: '#/components/schemas/Version'
                    type: array
            required:
                - region
                - env
                - versions
            type: object
        GetWalletResponse:
            properties:
                data:
                    $ref: '#/components/schemas/WalletWithBalances'
            required:
                - data
            type: object
        GetWalletSummaryResponse:
            properties:
                availableFunds:
                    additionalProperties:
                        format: bigint
                        type: integer
                    type: object
                balances:
                    items:
                        $ref: '#/components/schemas/BalanceWithAssets'
                    type: array
                expirableFunds:
                    additionalProperties:
                        format: bigint
                        type: integer
                    type: object
                expiredFunds:
                    additionalProperties:
                        format: bigint
                        type: integer
                    type: object
                holdFunds:
                    additionalProperties:
                        format: bigint
                        type: integer
                    type: object
            required:
                - balances
                - availableFunds
                - expiredFunds
                - expirableFunds
                - holdFunds
            type: object
        GetWorkflowInstanceHistoryResponse:
            properties:
                data:
                    $ref: '#/components/schemas/WorkflowInstanceHistoryList'
            required:
                - data
            type: object
        GetWorkflowInstanceHistoryStageResponse:
            properties:
                data:
                    $ref: '#/components/schemas/WorkflowInstanceHistoryStageList'
            required:
                - data
            type: object
        GetWorkflowInstanceResponse:
            properties:
                data:
                    $ref: '#/components/schemas/WorkflowInstance'
            required:
                - data
            type: object
        GetWorkflowResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Workflow'
            required:
                - data
            type: object
        Hold:
            properties:
                description:
                    type: string
                destination:
                    $ref: '#/components/schemas/Subject'
                id:
                    description: The unique ID of the hold.
                    format: uuid
                    type: string
                metadata:
                    additionalProperties:
                        type: string
                    description: Metadata associated with the hold.
                    type: object
                walletID:
                    description: The ID of the wallet the hold is associated with.
                    type: string
            required:
                - id
                - walletID
                - metadata
                - description
            type: object
        LedgerAccountSubject:
            properties:
                identifier:
                    type: string
                type:
                    type: string
            required:
                - type
                - identifier
            type: object
        LedgerInfoResponseV2:
            properties:
                data:
                    $ref: '#/components/schemas/LedgerInfoV2'
        LedgerInfoV2:
            properties:
                name:
                    example: ledger001
                    type: string
                storage:
                    properties:
                        migrations:
                            items:
                                $ref: '#/components/schemas/MigrationInfoV2'
                            type: array
                    type: object
            type: object
        LedgerStorageV2:
            properties:
                driver:
                    type: string
                ledgers:
                    items:
                        type: string
                    type: array
            required:
                - driver
                - ledgers
            type: object
        ListBalancesResponse:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/Cursor'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/Balance'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        ListClientsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/Client'
                    type: array
            type: object
        ListRunsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/WorkflowInstance'
                    type: array
            required:
                - data
        ListScopesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/Scope'
                    type: array
            type: object
        ListUsersResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/User'
                    type: array
            type: object
        ListWalletsResponse:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/Cursor'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/Wallet'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        ListWorkflowsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/Workflow'
                    type: array
            required:
                - data
            type: object
        LogV2:
            properties:
                data:
                    additionalProperties: true
                    type: object
                date:
                    format: date-time
                    type: string
                hash:
                    example: 9ee060170400f556b7e1575cb13f9db004f150a08355c7431c62bc639166431e
                    type: string
                id:
                    example: 1234
                    format: bigint
                    minimum: 0
                    type: integer
                type:
                    enum:
                        - NEW_TRANSACTION
                        - SET_METADATA
                        - REVERTED_TRANSACTION
                    type: string
            required:
                - id
                - type
                - data
                - hash
                - date
            type: object
        LogsCursorResponseV2:
            properties:
                cursor:
                    properties:
                        data:
                            items:
                                $ref: '#/components/schemas/LogV2'
                            type: array
                        hasMore:
                            example: false
                            type: boolean
                        next:
                            example: ""
                            type: string
                        pageSize:
                            example: 15
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        previous:
                            example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
                            type: string
                    required:
                        - pageSize
                        - hasMore
                        - data
                    type: object
            required:
                - cursor
            type: object
        MangoPayConfig:
            properties:
                apiKey:
                    example: XXX
                    type: string
                clientID:
                    example: XXX
                    type: string
                endpoint:
                    example: XXX
                    type: string
                name:
                    example: My MangoPay Account
                    type: string
                pollingPeriod:
                    default: 120s
                    description: |
                        The frequency at which the connector will try to fetch new BalanceTransaction objects from MangoPay API.
                    example: 60s
                    type: string
            required:
                - name
                - clientID
                - apiKey
                - endpoint
            type: object
        Metadata:
            additionalProperties:
                type: string
            example:
                admin: "true"
            type: object
        MetadataV2:
            additionalProperties:
                type: string
            example:
                admin: "true"
            type: object
        MigrationInfoV2:
            properties:
                date:
                    format: date-time
                    type: string
                name:
                    example: migrations:001
                    type: string
                state:
                    enum:
                        - to do
                        - done
                    type: string
                version:
                    example: 11
                    format: int64
                    minimum: 0
                    type: integer
            type: object
        ModulrConfig:
            properties:
                apiKey:
                    example: XXX
                    type: string
                apiSecret:
                    example: XXX
                    type: string
                endpoint:
                    example: XXX
                    type: string
                name:
                    example: My Modulr Account
                    type: string
                pollingPeriod:
                    default: 120s
                    description: |
                        The frequency at which the connector will try to fetch new BalanceTransaction objects from Modulr API.
                    example: 60s
                    type: string
            required:
                - name
                - apiKey
                - apiSecret
            type: object
        Monetary:
            properties:
                amount:
                    description: The amount of the monetary value.
                    format: bigint
                    type: integer
                asset:
                    description: The asset of the monetary value.
                    type: string
            required:
                - asset
                - amount
            type: object
        MoneycorpConfig:
            properties:
                apiKey:
                    example: XXX
                    type: string
                clientID:
                    example: XXX
                    type: string
                endpoint:
                    example: XXX
                    type: string
                name:
                    example: My Moneycorp Account
                    type: string
                pollingPeriod:
                    default: 120s
                    description: |
                        The frequency at which the connector will try to fetch new BalanceTransaction objects from MoneyCorp API.
                    example: 60s
                    type: string
            required:
                - name
                - clientID
                - apiKey
                - endpoint
            type: object
        Payment:
            properties:
                adjustments:
                    items:
                        $ref: '#/components/schemas/PaymentAdjustment'
                    type: array
                asset:
                    example: USD
                    type: string
                connectorID:
                    type: string
                createdAt:
                    format: date-time
                    type: string
                destinationAccountID:
                    type: string
                id:
                    example: XXX
                    type: string
                initialAmount:
                    example: 100
                    format: bigint
                    minimum: 0
                    type: integer
                metadata:
                    $ref: '#/components/schemas/PaymentMetadata'
                provider:
                    $ref: '#/components/schemas/Connector'
                raw:
                    nullable: true
                    type: object
                reference:
                    type: string
                scheme:
                    enum:
                        - visa
                        - mastercard
                        - amex
                        - diners
                        - discover
                        - jcb
                        - unionpay
                        - sepa debit
                        - sepa credit
                        - sepa
                        - apple pay
                        - google pay
                        - a2a
                        - ach debit
                        - ach
                        - rtp
                        - unknown
                        - other
                    type: string
                sourceAccountID:
                    type: string
                status:
                    $ref: '#/components/schemas/PaymentStatus'
                type:
                    enum:
                        - PAY-IN
                        - PAYOUT
                        - TRANSFER
                        - OTHER
                    type: string
            required:
                - id
                - reference
                - connectorID
                - sourceAccountID
                - destinationAccountID
                - type
                - status
                - initialAmount
                - scheme
                - asset
                - createdAt
                - raw
                - adjustments
                - metadata
            type: object
        PaymentAdjustment:
            properties:
                absolute:
                    type: boolean
                amount:
                    example: 100
                    format: bigint
                    minimum: 0
                    type: integer
                date:
                    format: date-time
                    type: string
                raw:
                    type: object
                status:
                    $ref: '#/components/schemas/PaymentStatus'
            required:
                - status
                - amount
                - date
                - raw
                - absolute
            type: object
        PaymentMetadata:
            nullable: true
            properties:
                key:
                    type: string
            type: object
        PaymentResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Payment'
            required:
                - data
            type: object
        PaymentStatus:
            enum:
                - PENDING
                - ACTIVE
                - TERMINATED
                - FAILED
                - SUCCEEDED
                - CANCELLED
            type: string
        PaymentsCursor:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/CursorBase'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/Payment'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        PostTransaction:
            properties:
                metadata:
                    $ref: '#/components/schemas/Metadata'
                postings:
                    items:
                        $ref: '#/components/schemas/Posting'
                    type: array
                reference:
                    example: ref:001
                    type: string
                script:
                    properties:
                        plain:
                            example: |
                                vars {
                                account $user
                                }
                                send [COIN 10] (
                                	source = @world
                                	destination = $user
                                )
                            type: string
                        vars:
                            additionalProperties: true
                            example:
                                user: users:042
                            type: object
                    required:
                        - plain
                    type: object
                timestamp:
                    format: date-time
                    type: string
            required:
                - metadata
            type: object
        PostTransactionV2:
            properties:
                metadata:
                    $ref: '#/components/schemas/MetadataV2'
                postings:
                    items:
                        $ref: '#/components/schemas/PostingV2'
                    type: array
                reference:
                    example: ref:001
                    type: string
                script:
                    properties:
                        plain:
                            example: |
                                vars {
                                account $user
                                }
                                send [COIN 10] (
                                	source = @world
                                	destination = $user
                                )
                            type: string
                        vars:
                            additionalProperties: true
                            example:
                                user: users:042
                            type: object
                    required:
                        - plain
                    type: object
                timestamp:
                    format: date-time
                    type: string
            required:
                - metadata
            type: object
        Posting:
            properties:
                amount:
                    example: 100
                    format: bigint
                    minimum: 0
                    type: integer
                asset:
                    example: COIN
                    type: string
                destination:
                    example: users:002
                    type: string
                source:
                    example: users:001
                    type: string
            required:
                - amount
                - asset
                - destination
                - source
            type: object
        PostingV2:
            properties:
                amount:
                    example: 100
                    format: bigint
                    minimum: 0
                    type: integer
                asset:
                    example: COIN
                    type: string
                destination:
                    example: users:002
                    type: string
                source:
                    example: users:001
                    type: string
            required:
                - amount
                - asset
                - destination
                - source
            type: object
        Query:
            properties:
                after:
                    items:
                        example: users:002
                        type: string
                    type: array
                cursor:
                    example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
                    type: string
                ledgers:
                    items:
                        example: quickstart
                        type: string
                    type: array
                pageSize:
                    format: int64
                    minimum: 0
                    type: integer
                policy:
                    example: OR
                    type: string
                raw:
                    example:
                        query:
                            match_all: {}
                    type: object
                sort:
                    example: id:asc
                    type: string
                target:
                    type: string
                terms:
                    items:
                        example: destination=central_bank1
                        type: string
                    type: array
            type: object
        ReadClientResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Client'
            type: object
        ReadScopeResponse:
            $ref: '#/components/schemas/CreateScopeResponse'
        ReadUserResponse:
            properties:
                data:
                    $ref: '#/components/schemas/User'
            type: object
        ReadWorkflowResponse:
            properties:
                data:
                    $ref: '#/components/schemas/Workflow'
            required:
                - data
            type: object
        Response:
            properties:
                cursor:
                    properties:
                        data:
                            items:
                                allOf:
                                    - additionalProperties: true
                                      type: object
                            type: array
                        hasMore:
                            type: boolean
                        next:
                            example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
                            type: string
                        pageSize:
                            format: int64
                            minimum: 0
                            type: integer
                        previous:
                            example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
                            type: string
                        total:
                            properties:
                                relation:
                                    example: eq
                                    type: string
                                value:
                                    example: 1
                                    format: int64
                                    minimum: 0
                                    type: integer
                            title: total
                            type: object
                    title: cursor
                    type: object
                data:
                    additionalProperties: true
                    description: The payload
                    type: object
            type: object
        RevertTransactionResponse:
            $ref: '#/components/schemas/CreateTransactionResponse'
        RevertTransactionResponseV2:
            $ref: '#/components/schemas/CreateTransactionResponseV2'
        RunWorkflowRequest:
            additionalProperties:
                type: string
            type: object
        RunWorkflowResponse:
            properties:
                data:
                    $ref: '#/components/schemas/WorkflowInstance'
            required:
                - data
            type: object
        Scope:
            allOf:
                - $ref: '#/components/schemas/ScopeOptions'
                - properties:
                    id:
                        type: string
                    transient:
                        items:
                            type: string
                        type: array
                  required:
                    - id
                  type: object
        ScopeOptions:
            properties:
                label:
                    type: string
                metadata:
                    $ref: '#/components/schemas/Metadata'
            required:
                - label
            type: object
        ScriptV2:
            properties:
                metadata:
                    $ref: '#/components/schemas/MetadataV2'
                plain:
                    example: |
                        vars {
                        account $user
                        }
                        send [COIN 10] (
                        	source = @world
                        	destination = $user
                        )
                    type: string
                reference:
                    description: Reference to attach to the generated transaction
                    example: order_1234
                    type: string
                vars:
                    additionalProperties: true
                    example:
                        user: users:042
                    type: object
            required:
                - plain
            type: object
        Secret:
            allOf:
                - $ref: '#/components/schemas/SecretOptions'
                - properties:
                    clear:
                        type: string
                    id:
                        type: string
                    lastDigits:
                        type: string
                  required:
                    - id
                    - lastDigits
                    - clear
                  type: object
        SecretOptions:
            properties:
                metadata:
                    $ref: '#/components/schemas/Metadata'
                name:
                    type: string
            required:
                - name
            type: object
        ServerInfo:
            properties:
                version:
                    type: string
            required:
                - version
            type: object
        Stage:
            anyOf:
                - $ref: '#/components/schemas/StageSend'
                - $ref: '#/components/schemas/StageDelay'
                - $ref: '#/components/schemas/StageWaitEvent'
        StageDelay:
            properties:
                duration:
                    type: string
                until:
                    format: date-time
                    type: string
            type: object
        StageSend:
            properties:
                amount:
                    $ref: '#/components/schemas/Monetary'
                destination:
                    $ref: '#/components/schemas/StageSendDestination'
                source:
                    $ref: '#/components/schemas/StageSendSource'
            type: object
        StageSendDestination:
            properties:
                account:
                    $ref: '#/components/schemas/StageSendDestinationAccount'
                payment:
                    $ref: '#/components/schemas/StageSendDestinationPayment'
                wallet:
                    $ref: '#/components/schemas/StageSendDestinationWallet'
            type: object
        StageSendDestinationAccount:
            $ref: '#/components/schemas/StageSendSourceAccount'
        StageSendDestinationPayment:
            properties:
                psp:
                    type: string
            required:
                - psp
            type: object
        StageSendDestinationWallet:
            $ref: '#/components/schemas/StageSendSourceWallet'
        StageSendSource:
            properties:
                account:
                    $ref: '#/components/schemas/StageSendSourceAccount'
                payment:
                    $ref: '#/components/schemas/StageSendSourcePayment'
                wallet:
                    $ref: '#/components/schemas/StageSendSourceWallet'
            type: object
        StageSendSourceAccount:
            properties:
                id:
                    type: string
                ledger:
                    type: string
            required:
                - id
            type: object
        StageSendSourcePayment:
            properties:
                id:
                    type: string
            required:
                - id
            type: object
        StageSendSourceWallet:
            properties:
                balance:
                    type: string
                id:
                    type: string
            required:
                - id
            type: object
        StageStatus:
            properties:
                error:
                    type: string
                instanceID:
                    type: string
                stage:
                    type: number
                startedAt:
                    format: date-time
                    type: string
                terminatedAt:
                    format: date-time
                    type: string
            required:
                - stage
                - instanceID
                - startedAt
            type: object
        StageWaitEvent:
            properties:
                event:
                    type: string
            required:
                - event
            type: object
        StatsResponseV2:
            properties:
                data:
                    $ref: '#/components/schemas/StatsV2'
            required:
                - data
            type: object
        StatsV2:
            properties:
                accounts:
                    format: int64
                    minimum: 0
                    type: integer
                transactions:
                    format: bigint
                    minimum: 0
                    type: integer
            required:
                - accounts
                - transactions
            type: object
        StripeConfig:
            properties:
                apiKey:
                    example: XXX
                    type: string
                name:
                    example: My Stripe Account
                    type: string
                pageSize:
                    default: 10
                    description: |
                        Number of BalanceTransaction to fetch at each polling interval.
                    example: 50
                    format: int64
                    minimum: 0
                    type: integer
                pollingPeriod:
                    default: 120s
                    description: |
                        The frequency at which the connector will try to fetch new BalanceTransaction objects from Stripe API.
                    example: 60s
                    type: string
            required:
                - name
                - apiKey
            type: object
        StripeTransferRequest:
            properties:
                amount:
                    example: 100
                    format: bigint
                    minimum: 0
                    type: integer
                asset:
                    example: USD
                    type: string
                connectorID:
                    type: string
                destination:
                    example: acct_1Gqj58KZcSIg2N2q
                    type: string
                metadata:
                    description: |
                        A set of key/value pairs that you can attach to a transfer object.
                        It can be useful for storing additional information about the transfer in a structured format.
                    example:
                        order_id: "6735"
                    type: object
            type: object
        Subject:
            discriminator:
                mapping:
                    ACCOUNT: '#/components/schemas/LedgerAccountSubject'
                    WALLET: '#/components/schemas/WalletSubject'
                propertyName: type
            oneOf:
                - $ref: '#/components/schemas/LedgerAccountSubject'
                - $ref: '#/components/schemas/WalletSubject'
        TargetIdV2:
            oneOf:
                - type: string
                - format: bigint
                  type: integer
        TargetTypeV2:
            enum:
                - TRANSACTION
                - ACCOUNT
            type: string
        TaskBankingCircle:
            allOf:
                - $ref: '#/components/schemas/TaskBase'
                - properties:
                    descriptor:
                        properties:
                            key:
                                type: string
                            name:
                                type: string
                        type: object
                  required:
                    - descriptor
                  type: object
        TaskBase:
            properties:
                connectorID:
                    type: string
                createdAt:
                    format: date-time
                    type: string
                error:
                    type: string
                id:
                    format: uuid
                    type: string
                state:
                    type: object
                status:
                    $ref: '#/components/schemas/PaymentStatus'
                updatedAt:
                    format: date-time
                    type: string
            required:
                - id
                - connectorID
                - createdAt
                - updatedAt
                - descriptor
                - status
                - state
            type: object
        TaskCurrencyCloud:
            allOf:
                - $ref: '#/components/schemas/TaskBase'
                - properties:
                    descriptor:
                        properties:
                            name:
                                type: string
                        type: object
                  required:
                    - descriptor
                  type: object
        TaskDummyPay:
            allOf:
                - $ref: '#/components/schemas/TaskBase'
                - properties:
                    descriptor:
                        properties:
                            fileName:
                                type: string
                            key:
                                type: string
                            name:
                                type: string
                        type: object
                  required:
                    - descriptor
                  type: object
        TaskMangoPay:
            allOf:
                - $ref: '#/components/schemas/TaskBase'
                - properties:
                    descriptor:
                        properties:
                            key:
                                type: string
                            name:
                                type: string
                            userID:
                                type: string
                        type: object
                  required:
                    - descriptor
                  type: object
        TaskModulr:
            allOf:
                - $ref: '#/components/schemas/TaskBase'
                - properties:
                    descriptor:
                        properties:
                            accountID:
                                type: string
                            key:
                                type: string
                            name:
                                type: string
                        type: object
                  required:
                    - descriptor
                  type: object
        TaskMoneycorp:
            allOf:
                - $ref: '#/components/schemas/TaskBase'
                - properties:
                    descriptor:
                        properties:
                            accountID:
                                type: string
                            key:
                                type: string
                            name:
                                type: string
                        type: object
                  required:
                    - descriptor
                  type: object
        TaskResponse:
            properties:
                data:
                    oneOf:
                        - $ref: '#/components/schemas/TaskStripe'
                        - $ref: '#/components/schemas/TaskWise'
                        - $ref: '#/components/schemas/TaskCurrencyCloud'
                        - $ref: '#/components/schemas/TaskDummyPay'
                        - $ref: '#/components/schemas/TaskModulr'
                        - $ref: '#/components/schemas/TaskBankingCircle'
                        - $ref: '#/components/schemas/TaskMangoPay'
                        - $ref: '#/components/schemas/TaskMoneycorp'
            required:
                - data
            type: object
        TaskStripe:
            allOf:
                - $ref: '#/components/schemas/TaskBase'
                - properties:
                    descriptor:
                        properties:
                            account:
                                type: string
                            main:
                                type: boolean
                            name:
                                type: string
                        required:
                            - name
                            - account
                        type: object
                  required:
                    - descriptor
                  type: object
        TaskWise:
            allOf:
                - $ref: '#/components/schemas/TaskBase'
                - properties:
                    descriptor:
                        properties:
                            key:
                                type: string
                            name:
                                type: string
                            profileID:
                                format: int64
                                minimum: 0
                                type: integer
                        type: object
                  required:
                    - descriptor
                  type: object
        TasksCursor:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/CursorBase'
                        - properties:
                            data:
                                items:
                                    oneOf:
                                        - $ref: '#/components/schemas/TaskStripe'
                                        - $ref: '#/components/schemas/TaskWise'
                                        - $ref: '#/components/schemas/TaskCurrencyCloud'
                                        - $ref: '#/components/schemas/TaskDummyPay'
                                        - $ref: '#/components/schemas/TaskModulr'
                                        - $ref: '#/components/schemas/TaskBankingCircle'
                                        - $ref: '#/components/schemas/TaskMangoPay'
                                        - $ref: '#/components/schemas/TaskMoneycorp'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        Transaction:
            properties:
                id:
                    format: int64
                    minimum: 0
                    type: integer
                ledger:
                    type: string
                metadata:
                    additionalProperties:
                        type: string
                    description: Metadata associated with the wallet.
                    type: object
                postCommitVolumes:
                    $ref: '#/components/schemas/AggregatedVolumes'
                postings:
                    items:
                        $ref: '#/components/schemas/Posting'
                    type: array
                preCommitVolumes:
                    $ref: '#/components/schemas/AggregatedVolumes'
                reference:
                    example: ref:001
                    type: string
                timestamp:
                    format: date-time
                    type: string
            required:
                - postings
                - timestamp
                - ix
                - metadata
            type: object
        TransactionV2:
            properties:
                id:
                    format: bigint
                    minimum: 0
                    type: integer
                metadata:
                    $ref: '#/components/schemas/MetadataV2'
                postings:
                    items:
                        $ref: '#/components/schemas/PostingV2'
                    type: array
                reference:
                    example: ref:001
                    type: string
                reverted:
                    type: boolean
                timestamp:
                    format: date-time
                    type: string
            required:
                - postings
                - timestamp
                - id
                - metadata
                - reverted
            type: object
        TransactionsCursorResponseV2:
            properties:
                cursor:
                    properties:
                        data:
                            items:
                                $ref: '#/components/schemas/ExpandedTransactionV2'
                            type: array
                        hasMore:
                            example: false
                            type: boolean
                        next:
                            example: ""
                            type: string
                        pageSize:
                            example: 15
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        previous:
                            example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
                            type: string
                    required:
                        - pageSize
                        - hasMore
                        - data
                    type: object
            required:
                - cursor
            type: object
        TransferInitiation:
            properties:
                amount:
                    format: bigint
                    type: integer
                asset:
                    example: USD
                    type: string
                connectorID:
                    type: string
                createdAt:
                    format: date-time
                    type: string
                description:
                    type: string
                destinationAccountID:
                    type: string
                error:
                    type: string
                id:
                    example: XXX
                    type: string
                relatedPayments:
                    items:
                        $ref: '#/components/schemas/TransferInitiationPayments'
                    type: array
                scheduledAt:
                    format: date-time
                    type: string
                sourceAccountID:
                    type: string
                status:
                    $ref: '#/components/schemas/TransferInitiationStatus'
                type:
                    enum:
                        - TRANSFER
                        - PAYOUT
                    type: string
                updatedAt:
                    format: date-time
                    type: string
            required:
                - id
                - createdAt
                - updatedAt
                - scheduledAt
                - description
                - sourceAccountID
                - destinationAccountID
                - connectorID
                - type
                - amount
                - asset
                - status
                - error
            type: object
        TransferInitiationPayments:
            properties:
                createdAt:
                    format: date-time
                    type: string
                error:
                    type: string
                paymentID:
                    type: string
                status:
                    $ref: '#/components/schemas/PaymentStatus'
            required:
                - paymentID
                - createdAt
                - status
                - error
            type: object
        TransferInitiationRequest:
            properties:
                amount:
                    format: bigint
                    type: integer
                asset:
                    example: USD
                    type: string
                connectorID:
                    type: string
                description:
                    type: string
                destinationAccountID:
                    type: string
                provider:
                    $ref: '#/components/schemas/Connector'
                reference:
                    example: XXX
                    type: string
                scheduledAt:
                    format: date-time
                    type: string
                sourceAccountID:
                    type: string
                type:
                    enum:
                        - TRANSFER
                        - PAYOUT
                    type: string
                validated:
                    type: boolean
            required:
                - reference
                - scheduledAt
                - description
                - sourceAccountID
                - destinationAccountID
                - type
                - amount
                - asset
                - validated
            type: object
        TransferInitiationResponse:
            properties:
                data:
                    $ref: '#/components/schemas/TransferInitiation'
            required:
                - data
            type: object
        TransferInitiationStatus:
            enum:
                - WAITING_FOR_VALIDATION
                - PROCESSING
                - PROCESSED
                - FAILED
                - REJECTED
                - VALIDATED
            type: string
        TransferInitiationsCursor:
            properties:
                cursor:
                    allOf:
                        - $ref: '#/components/schemas/CursorBase'
                        - properties:
                            data:
                                items:
                                    $ref: '#/components/schemas/TransferInitiation'
                                type: array
                          required:
                            - data
                          type: object
            required:
                - cursor
            type: object
        TransferRequest:
            properties:
                amount:
                    example: 100
                    format: bigint
                    minimum: 0
                    type: integer
                asset:
                    example: USD
                    type: string
                destination:
                    example: acct_1Gqj58KZcSIg2N2q
                    type: string
                source:
                    example: acct_1Gqj58KZcSIg2N2q
                    type: string
            required:
                - asset
                - amount
                - destination
            type: object
        TransferResponse:
            properties:
                id:
                    type: string
            type: object
        TransfersResponse:
            properties:
                data:
                    items:
                        properties:
                            amount:
                                format: bigint
                                minimum: 0
                                type: integer
                            asset:
                                type: string
                            currency:
                                type: string
                            destination:
                                type: string
                            error:
                                type: string
                            id:
                                type: string
                            source:
                                type: string
                            status:
                                type: string
                        type: object
                    type: array
            type: object
        UpdateClientRequest:
            $ref: '#/components/schemas/ClientOptions'
        UpdateClientResponse:
            $ref: '#/components/schemas/CreateClientResponse'
        UpdateScopeRequest:
            $ref: '#/components/schemas/ScopeOptions'
        UpdateScopeResponse:
            $ref: '#/components/schemas/CreateScopeResponse'
        UpdateTransferInitiationStatusRequest:
            properties:
                status:
                    enum:
                        - WAITING_FOR_VALIDATION
                        - PROCESSING
                        - PROCESSED
                        - FAILED
                        - REJECTED
                        - VALIDATED
                    type: string
            required:
                - status
            type: object
        User:
            properties:
                email:
                    example: user1@orga1.com
                    type: string
                id:
                    example: 3bb03708-312f-48a0-821a-e765837dc2c4
                    type: string
                subject:
                    example: Jane Doe
                    type: string
            type: object
        Version:
            properties:
                health:
                    type: boolean
                name:
                    type: string
                version:
                    type: string
            required:
                - name
                - version
                - health
            type: object
        Volume:
            example:
                balance: 80
                input: 100
                output: 20
            properties:
                balance:
                    format: bigint
                    type: integer
                input:
                    format: bigint
                    type: integer
                output:
                    format: bigint
                    type: integer
            required:
                - input
                - output
                - balance
            type: object
        VolumeV2:
            example:
                balance: 80
                input: 100
                output: 20
            properties:
                balance:
                    format: bigint
                    type: integer
                input:
                    format: bigint
                    type: integer
                output:
                    format: bigint
                    type: integer
            required:
                - input
                - output
            type: object
        Volumes:
            additionalProperties:
                $ref: '#/components/schemas/Volume'
            example:
                EUR:
                    balance: 90
                    input: 100
                    output: 10
                USD:
                    balance: 90
                    input: 100
                    output: 10
            type: object
        VolumesV2:
            additionalProperties:
                $ref: '#/components/schemas/VolumeV2'
            example:
                EUR:
                    balance: 90
                    input: 100
                    output: 10
                USD:
                    balance: 90
                    input: 100
                    output: 10
            type: object
        Wallet:
            properties:
                createdAt:
                    format: date-time
                    type: string
                id:
                    description: The unique ID of the wallet.
                    format: uuid
                    type: string
                ledger:
                    type: string
                metadata:
                    additionalProperties:
                        type: string
                    description: Metadata associated with the wallet.
                    type: object
                name:
                    type: string
            required:
                - name
                - id
                - metadata
                - createdAt
                - ledger
            type: object
        WalletSubject:
            properties:
                balance:
                    type: string
                identifier:
                    type: string
                type:
                    type: string
            required:
                - type
                - identifier
            type: object
        WalletWithBalances:
            properties:
                balances:
                    properties:
                        main:
                            $ref: '#/components/schemas/AssetHolder'
                    required:
                        - main
                    type: object
                createdAt:
                    format: date-time
                    type: string
                id:
                    description: The unique ID of the wallet.
                    format: uuid
                    type: string
                ledger:
                    type: string
                metadata:
                    additionalProperties:
                        type: string
                    description: Metadata associated with the wallet.
                    type: object
                name:
                    type: string
            required:
                - name
                - id
                - metadata
                - createdAt
                - balances
                - ledger
            type: object
        WiseConfig:
            properties:
                apiKey:
                    example: XXX
                    type: string
                name:
                    example: My Wise Account
                    type: string
                pollingPeriod:
                    default: 120s
                    description: |
                        The frequency at which the connector will try to fetch new BalanceTransaction objects from Wise API.
                    example: 60s
                    type: string
            required:
                - name
                - apiKey
            type: object
        Workflow:
            properties:
                config:
                    $ref: '#/components/schemas/WorkflowConfig'
                createdAt:
                    format: date-time
                    type: string
                id:
                    type: string
                updatedAt:
                    format: date-time
                    type: string
            required:
                - config
                - createdAt
                - updatedAt
                - id
            type: object
        WorkflowConfig:
            properties:
                name:
                    type: string
                stages:
                    items:
                        additionalProperties: {}
                        type: object
                    type: array
            required:
                - stages
            type: object
        WorkflowInstance:
            properties:
                createdAt:
                    format: date-time
                    type: string
                error:
                    type: string
                id:
                    type: string
                status:
                    items:
                        $ref: '#/components/schemas/StageStatus'
                    type: array
                terminated:
                    type: boolean
                terminatedAt:
                    format: date-time
                    type: string
                updatedAt:
                    format: date-time
                    type: string
                workflowID:
                    type: string
            required:
                - workflowID
                - id
                - createdAt
                - updatedAt
                - terminated
            type: object
        WorkflowInstanceHistory:
            properties:
                error:
                    type: string
                input:
                    $ref: '#/components/schemas/Stage'
                name:
                    type: string
                startedAt:
                    format: date-time
                    type: string
                terminated:
                    type: boolean
                terminatedAt:
                    format: date-time
                    type: string
            required:
                - name
                - input
                - terminated
                - startedAt
            type: object
        WorkflowInstanceHistoryList:
            items:
                $ref: '#/components/schemas/WorkflowInstanceHistory'
            type: array
        WorkflowInstanceHistoryStage:
            properties:
                attempt:
                    type: integer
                error:
                    type: string
                input:
                    $ref: '#/components/schemas/WorkflowInstanceHistoryStageInput'
                lastFailure:
                    type: string
                name:
                    type: string
                nextExecution:
                    format: date-time
                    type: string
                output:
                    $ref: '#/components/schemas/WorkflowInstanceHistoryStageOutput'
                startedAt:
                    format: date-time
                    type: string
                terminated:
                    type: boolean
                terminatedAt:
                    format: date-time
                    type: string
            required:
                - name
                - input
                - startedAt
                - terminated
                - attempt
            type: object
        WorkflowInstanceHistoryStageInput:
            properties:
                ConfirmHold:
                    $ref: '#/components/schemas/ActivityConfirmHold'
                CreateTransaction:
                    $ref: '#/components/schemas/ActivityCreateTransaction'
                CreditWallet:
                    $ref: '#/components/schemas/ActivityCreditWallet'
                DebitWallet:
                    $ref: '#/components/schemas/ActivityDebitWallet'
                GetAccount:
                    $ref: '#/components/schemas/ActivityGetAccount'
                GetPayment:
                    $ref: '#/components/schemas/ActivityGetPayment'
                GetWallet:
                    $ref: '#/components/schemas/ActivityGetWallet'
                RevertTransaction:
                    $ref: '#/components/schemas/ActivityRevertTransaction'
                StripeTransfer:
                    $ref: '#/components/schemas/ActivityStripeTransfer'
                VoidHold:
                    $ref: '#/components/schemas/ActivityVoidHold'
            type: object
        WorkflowInstanceHistoryStageList:
            items:
                $ref: '#/components/schemas/WorkflowInstanceHistoryStage'
            type: array
        WorkflowInstanceHistoryStageOutput:
            properties:
                CreateTransaction:
                    $ref: '#/components/schemas/ActivityCreateTransactionOutput'
                DebitWallet:
                    $ref: '#/components/schemas/ActivityDebitWalletOutput'
                GetAccount:
                    $ref: '#/components/schemas/ActivityGetAccountOutput'
                GetPayment:
                    $ref: '#/components/schemas/ActivityGetPaymentOutput'
                GetWallet:
                    $ref: '#/components/schemas/ActivityGetWalletOutput'
                RevertTransaction:
                    $ref: '#/components/schemas/ActivityRevertTransactionOutput'
            type: object
    securitySchemes:
        Authorization:
            flows:
                clientCredentials:
                    refreshUrl: https://localhost/api/auth/oauth/token
                    scopes: {}
                    tokenUrl: https://localhost/api/auth/oauth/token
            type: oauth2
info:
    contact:
        email: support@formance.com
        name: Formance
        url: https://www.formance.com
    description: |
        Open, modular foundation for unique payments flows

        # Introduction
        This API is documented in **OpenAPI format**.

        # Authentication
        Formance Stack offers one forms of authentication:
          - OAuth2
        OAuth2 - an open protocol to allow secure authorization in a simple
        and standard method from web, mobile and desktop applications.
        <SecurityDefinitions />
    title: Formance Stack API
    version: SDK_VERSION
    x-logo:
        altText: Formance
        url: https://avatars.githubusercontent.com/u/84325077?s=200&v=4
openapi: 3.0.3
paths:
    /api/auth/.well-known/openid-configuration:
        get:
            responses:
                "200":
                    description: |
                        OpenID provider configuration.
                        See https://swagger.io/docs/specification/authentication/openid-connect-discovery/ for details
            tags:
                - auth.v1
    /api/auth/_info:
        get:
            operationId: getServerInfo
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerInfo'
                    description: Server information
            summary: Get server info
            tags:
                - Auth
                - auth.v1
    /api/auth/clients:
        get:
            operationId: listClients
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListClientsResponse'
                    description: List of clients
            summary: List clients
            tags:
                - Auth
                - Clients
                - auth.v1
        post:
            operationId: createClient
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateClientRequest'
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateClientResponse'
                    description: Client created
            summary: Create client
            tags:
                - Auth
                - Clients
                - auth.v1
    /api/auth/clients/{clientId}:
        delete:
            operationId: deleteClient
            parameters:
                - description: Client ID
                  in: path
                  name: clientId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Client deleted
            summary: Delete client
            tags:
                - Auth
                - Clients
                - auth.v1
        get:
            operationId: readClient
            parameters:
                - description: Client ID
                  in: path
                  name: clientId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadClientResponse'
                    description: Retrieved client
            summary: Read client
            tags:
                - Auth
                - Clients
                - auth.v1
        put:
            operationId: updateClient
            parameters:
                - description: Client ID
                  in: path
                  name: clientId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateClientRequest'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateClientResponse'
                    description: Updated client
            summary: Update client
            tags:
                - Auth
                - Clients
                - auth.v1
    /api/auth/clients/{clientId}/scopes/{scopeId}:
        delete:
            operationId: deleteScopeFromClient
            parameters:
                - description: Client ID
                  in: path
                  name: clientId
                  required: true
                  schema:
                    type: string
                - description: Scope ID
                  in: path
                  name: scopeId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Scope deleted from client
            summary: Delete scope from client
            tags:
                - Auth
                - Clients
                - auth.v1
        put:
            operationId: addScopeToClient
            parameters:
                - description: Client ID
                  in: path
                  name: clientId
                  required: true
                  schema:
                    type: string
                - description: Scope ID
                  in: path
                  name: scopeId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Scope added to client
            summary: Add scope to client
            tags:
                - Auth
                - Clients
                - auth.v1
    /api/auth/clients/{clientId}/secrets:
        post:
            operationId: createSecret
            parameters:
                - description: Client ID
                  in: path
                  name: clientId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateSecretRequest'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateSecretResponse'
                    description: Created secret
            summary: Add a secret to a client
            tags:
                - Auth
                - Clients
                - auth.v1
    /api/auth/clients/{clientId}/secrets/{secretId}:
        delete:
            operationId: deleteSecret
            parameters:
                - description: Client ID
                  in: path
                  name: clientId
                  required: true
                  schema:
                    type: string
                - description: Secret ID
                  in: path
                  name: secretId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Secret deleted
            summary: Delete a secret from a client
            tags:
                - Auth
                - Clients
                - auth.v1
    /api/auth/scopes:
        get:
            description: List Scopes
            operationId: listScopes
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListScopesResponse'
                    description: List of scopes
            summary: List scopes
            tags:
                - Auth
                - Scopes
                - auth.v1
        post:
            description: Create scope
            operationId: createScope
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateScopeRequest'
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateScopeResponse'
                    description: Created scope
            summary: Create scope
            tags:
                - Auth
                - Scopes
                - auth.v1
    /api/auth/scopes/{scopeId}:
        delete:
            description: Delete scope
            operationId: deleteScope
            parameters:
                - description: Scope ID
                  in: path
                  name: scopeId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Scope deleted
            summary: Delete scope
            tags:
                - Auth
                - Scopes
                - auth.v1
        get:
            description: Read scope
            operationId: readScope
            parameters:
                - description: Scope ID
                  in: path
                  name: scopeId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadScopeResponse'
                    description: Retrieved scope
            summary: Read scope
            tags:
                - Auth
                - Scopes
                - auth.v1
        put:
            description: Update scope
            operationId: updateScope
            parameters:
                - description: Scope ID
                  in: path
                  name: scopeId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateScopeRequest'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateScopeResponse'
                    description: Updated scope
            summary: Update scope
            tags:
                - Auth
                - Scopes
                - auth.v1
    /api/auth/scopes/{scopeId}/transient/{transientScopeId}:
        delete:
            description: Delete a transient scope from a scope
            operationId: deleteTransientScope
            parameters:
                - description: Scope ID
                  in: path
                  name: scopeId
                  required: true
                  schema:
                    type: string
                - description: Transient scope ID
                  in: path
                  name: transientScopeId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Transient scope deleted
            summary: Delete a transient scope from a scope
            tags:
                - Auth
                - Scopes
                - auth.v1
        put:
            description: Add a transient scope to a scope
            operationId: addTransientScope
            parameters:
                - description: Scope ID
                  in: path
                  name: scopeId
                  required: true
                  schema:
                    type: string
                - description: Transient scope ID
                  in: path
                  name: transientScopeId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Scope added
            summary: Add a transient scope to a scope
            tags:
                - Auth
                - Scopes
                - auth.v1
    /api/auth/users:
        get:
            description: List users
            operationId: listUsers
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListUsersResponse'
                    description: List of users
            summary: List users
            tags:
                - Auth
                - Users
                - auth.v1
    /api/auth/users/{userId}:
        get:
            description: Read user
            operationId: readUser
            parameters:
                - description: User ID
                  in: path
                  name: userId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadUserResponse'
                    description: Retrieved user
            summary: Read user
            tags:
                - Auth
                - Users
                - auth.v1
    /api/ledger/v2/v2/_info:
        get:
            operationId: getInfo
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConfigInfoResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Show server information
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/_bulk:
        post:
            operationId: createBulk
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BulkV2'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BulkResponseV2'
                    description: OK
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BulkResponseV2'
                    description: Failure
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Bulk request
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/_info:
        get:
            operationId: getLedgerInfo
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LedgerInfoResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Get information about a ledger
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/accounts:
        get:
            description: List accounts from a ledger, sorted by address in descending order.
            operationId: listAccounts
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: |
                    The maximum number of results to return per page.
                  example: 100
                  in: query
                  name: pageSize
                  schema:
                    format: int64
                    maximum: 1000
                    minimum: 1
                    type: integer
                - description: |
                    Parameter used in pagination requests. Maximum page size is set to 15.
                    Set to the value of next for the next page of results.
                    Set to the value of previous for the previous page of results.
                    No other parameters can be set when this parameter is set.
                  in: query
                  name: cursor
                  schema:
                    example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
                    type: string
                - in: query
                  name: expand
                  schema:
                    items:
                        type: string
                    type: string
                - in: query
                  name: pit
                  schema:
                    format: date-time
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            additionalProperties: true
                            type: object
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AccountsCursorResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: List accounts from a ledger
            tags:
                - ledger.v2
        head:
            operationId: countAccounts
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - in: query
                  name: pit
                  schema:
                    format: date-time
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            additionalProperties: true
                            type: object
            responses:
                "204":
                    description: OK
                    headers:
                        Count:
                            schema:
                                format: bigint
                                minimum: 0
                                type: integer
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Count the accounts from a ledger
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/accounts/{address}:
        get:
            operationId: getAccount
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: |
                    Exact address of the account. It must match the following regular expressions pattern:
                    ```
                    ^\w+(:\w+)*$
                    ```
                  in: path
                  name: address
                  required: true
                  schema:
                    example: users:001
                    type: string
                - in: query
                  name: expand
                  schema:
                    items:
                        type: string
                    type: string
                - in: query
                  name: pit
                  schema:
                    format: date-time
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AccountResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Get account by its address
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/accounts/{address}/metadata:
        post:
            operationId: addMetadataToAccount
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: |
                    Exact address of the account. It must match the following regular expressions pattern:
                    ```
                    ^\w+(:\w+)*$
                    ```
                  in: path
                  name: address
                  required: true
                  schema:
                    example: users:001
                    type: string
                - description: Set the dry run mode. Dry run mode doesn't add the logs to the database or publish a message to the message broker.
                  in: query
                  name: dryRun
                  schema:
                    example: true
                    type: boolean
                - description: Use an idempotency key
                  in: header
                  name: Idempotency-Key
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MetadataV2'
                description: metadata
                required: true
            responses:
                "204":
                    description: No Content
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Add metadata to an account
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/accounts/{address}/metadata/{key}:
        delete:
            description: Delete metadata by key
            operationId: deleteAccountMetadata
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: Account address
                  in: path
                  name: address
                  required: true
                  schema:
                    type: string
                - description: The key to remove.
                  in: path
                  name: key
                  required: true
                  schema:
                    example: foo
                    type: string
            responses:
                2XX:
                    description: Key deleted
            summary: Delete metadata by key
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/aggregate/balances:
        get:
            operationId: getBalancesAggregated
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - in: query
                  name: pit
                  schema:
                    format: date-time
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            additionalProperties: true
                            type: object
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AggregateBalancesResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Get the aggregated balances from selected accounts
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/logs:
        get:
            description: List the logs from a ledger, sorted by ID in descending order.
            operationId: listLogs
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: |
                    The maximum number of results to return per page.
                  example: 100
                  in: query
                  name: pageSize
                  schema:
                    format: int64
                    maximum: 1000
                    minimum: 1
                    type: integer
                - description: |
                    Parameter used in pagination requests. Maximum page size is set to 15.
                    Set to the value of next for the next page of results.
                    Set to the value of previous for the previous page of results.
                    No other parameters can be set when this parameter is set.
                  in: query
                  name: cursor
                  schema:
                    example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
                    type: string
                - in: query
                  name: pit
                  schema:
                    format: date-time
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            additionalProperties: true
                            type: object
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LogsCursorResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: List the logs from a ledger
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/stats:
        get:
            description: |
                Get statistics from a ledger. (aggregate metrics on accounts and transactions)
            operationId: readStats
            parameters:
                - description: name of the ledger
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StatsResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Get statistics from a ledger
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/transactions:
        get:
            description: List transactions from a ledger, sorted by id in descending order.
            operationId: listTransactions
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: |
                    The maximum number of results to return per page.
                  example: 100
                  in: query
                  name: pageSize
                  schema:
                    format: int64
                    maximum: 1000
                    minimum: 1
                    type: integer
                - description: |
                    Parameter used in pagination requests. Maximum page size is set to 15.
                    Set to the value of next for the next page of results.
                    Set to the value of previous for the previous page of results.
                    No other parameters can be set when this parameter is set.
                  in: query
                  name: cursor
                  schema:
                    example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
                    type: string
                - in: query
                  name: expand
                  schema:
                    items:
                        type: string
                    type: string
                - in: query
                  name: pit
                  schema:
                    format: date-time
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            additionalProperties: true
                            type: object
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TransactionsCursorResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: List transactions from a ledger
            tags:
                - ledger.v2
        head:
            operationId: countTransactions
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - in: query
                  name: pit
                  schema:
                    format: date-time
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            additionalProperties: true
                            type: object
            responses:
                "204":
                    description: OK
                    headers:
                        Count:
                            schema:
                                format: int64
                                minimum: 0
                                type: integer
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Count the transactions from a ledger
            tags:
                - ledger.v2
        post:
            operationId: createTransaction
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: Set the dryRun mode. dry run mode doesn't add the logs to the database or publish a message to the message broker.
                  in: query
                  name: dryRun
                  schema:
                    example: true
                    type: boolean
                - description: Use an idempotency key
                  in: header
                  name: Idempotency-Key
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PostTransactionV2'
                description: |
                    The request body must contain at least one of the following objects:
                      - `postings`: suitable for simple transactions
                      - `script`: enabling more complex transactions with Numscript
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateTransactionResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Create a new transaction to a ledger
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/transactions/{id}:
        get:
            operationId: getTransaction
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: Transaction ID.
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 1234
                    format: bigint
                    minimum: 0
                    type: integer
                - in: query
                  name: expand
                  schema:
                    items:
                        type: string
                    type: string
                - in: query
                  name: pit
                  schema:
                    format: date-time
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetTransactionResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Get transaction from a ledger by its ID
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/transactions/{id}/metadata:
        post:
            operationId: addMetadataOnTransaction
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: Transaction ID.
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 1234
                    format: bigint
                    minimum: 0
                    type: integer
                - description: Set the dryRun mode. Dry run mode doesn't add the logs to the database or publish a message to the message broker.
                  in: query
                  name: dryRun
                  schema:
                    example: true
                    type: boolean
                - description: Use an idempotency key
                  in: header
                  name: Idempotency-Key
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MetadataV2'
                description: metadata
            responses:
                "204":
                    description: No Content
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Set the metadata of a transaction by its ID
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/transactions/{id}/metadata/{key}:
        delete:
            description: Delete metadata by key
            operationId: deleteTransactionMetadata
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: Transaction ID.
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 1234
                    format: bigint
                    minimum: 0
                    type: integer
                - description: The key to remove.
                  in: path
                  name: key
                  required: true
                  schema:
                    example: foo
                    type: string
            responses:
                2XX:
                    description: Key deleted
            summary: Delete metadata by key
            tags:
                - ledger.v2
    /api/ledger/v2/v2/{ledger}/transactions/{id}/revert:
        post:
            operationId: revertTransaction
            parameters:
                - description: Name of the ledger.
                  in: path
                  name: ledger
                  required: true
                  schema:
                    example: ledger001
                    type: string
                - description: Transaction ID.
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 1234
                    format: bigint
                    minimum: 0
                    type: integer
                - description: Force revert
                  in: query
                  name: force
                  schema:
                    type: boolean
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RevertTransactionResponseV2'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponseV2'
                    description: Error
            summary: Revert a ledger transaction by its ID
            tags:
                - ledger.v2
    /api/orchestration/_info:
        get:
            operationId: getServerInfo
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerInfo'
                    description: Server information
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Get server info
            tags:
                - Orchestration
                - orchestration.v1
    /api/orchestration/instances:
        get:
            description: List instances of a workflow
            operationId: listInstances
            parameters:
                - description: A workflow id
                  example: xxx
                  in: query
                  name: workflowID
                  schema:
                    type: string
                - description: Filter running instances
                  example: true
                  in: query
                  name: running
                  schema:
                    type: boolean
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRunsResponse'
                    description: List of workflow instances
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: List instances of a workflow
            tags:
                - Orchestration
                - orchestration.v1
    /api/orchestration/instances/{instanceID}:
        get:
            description: Get a workflow instance by id
            operationId: getInstance
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetWorkflowInstanceResponse'
                    description: The workflow instance
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Get a workflow instance by id
            tags:
                - Orchestration
                - orchestration.v1
        parameters:
            - description: The instance id
              example: xxx
              in: path
              name: instanceID
              required: true
              schema:
                type: string
    /api/orchestration/instances/{instanceID}/abort:
        parameters:
            - description: The instance id
              example: xxx
              in: path
              name: instanceID
              required: true
              schema:
                type: string
        put:
            description: Cancel a running workflow
            operationId: cancelEvent
            responses:
                "204":
                    description: No content
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Cancel a running workflow
            tags:
                - Orchestration
                - orchestration.v1
    /api/orchestration/instances/{instanceID}/events:
        parameters:
            - description: The instance id
              example: xxx
              in: path
              name: instanceID
              required: true
              schema:
                type: string
        post:
            description: Send an event to a running workflow
            operationId: sendEvent
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                name:
                                    type: string
                            required:
                                - name
                            type: object
            responses:
                "204":
                    description: No content
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Send an event to a running workflow
            tags:
                - Orchestration
                - orchestration.v1
    /api/orchestration/instances/{instanceID}/history:
        get:
            description: Get a workflow instance history by id
            operationId: getInstanceHistory
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetWorkflowInstanceHistoryResponse'
                    description: The workflow instance history
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Get a workflow instance history by id
            tags:
                - Orchestration
                - orchestration.v1
        parameters:
            - description: The instance id
              example: xxx
              in: path
              name: instanceID
              required: true
              schema:
                type: string
    /api/orchestration/instances/{instanceID}/stages/{number}/history:
        get:
            description: Get a workflow instance stage history
            operationId: getInstanceStageHistory
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetWorkflowInstanceHistoryStageResponse'
                    description: The workflow instance stage history
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Get a workflow instance stage history
            tags:
                - Orchestration
                - orchestration.v1
        parameters:
            - description: The instance id
              example: xxx
              in: path
              name: instanceID
              required: true
              schema:
                type: string
            - description: The stage number
              example: 0
              in: path
              name: number
              required: true
              schema:
                type: integer
    /api/orchestration/workflows:
        get:
            description: List registered workflows
            operationId: listWorkflows
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListWorkflowsResponse'
                    description: List of workflows
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: List registered workflows
            tags:
                - Orchestration
                - orchestration.v1
        post:
            description: Create a workflow
            operationId: createWorkflow
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateWorkflowRequest'
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateWorkflowResponse'
                    description: Created workflow
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Create workflow
            tags:
                - Orchestration
                - orchestration.v1
    /api/orchestration/workflows/{flowId}:
        delete:
            description: Delete a flow by id
            operationId: deleteWorkflow
            responses:
                "204":
                    description: No content
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Delete a flow by id
            tags:
                - Orchestration
                - orchestration.v1
        get:
            description: Get a flow by id
            operationId: getWorkflow
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetWorkflowResponse'
                    description: The workflow
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Get a flow by id
            tags:
                - Orchestration
                - orchestration.v1
        parameters:
            - description: The flow id
              example: xxx
              in: path
              name: flowId
              required: true
              schema:
                type: string
    /api/orchestration/workflows/{workflowID}/instances:
        parameters:
            - description: The flow id
              example: xxx
              in: path
              name: workflowID
              required: true
              schema:
                type: string
        post:
            description: Run workflow
            operationId: runWorkflow
            parameters:
                - description: Wait end of the workflow before return
                  in: query
                  name: wait
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RunWorkflowRequest'
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunWorkflowResponse'
                    description: The workflow instance
                default:
                    $ref: '#/components/responses/ErrorResponse'
            summary: Run workflow
            tags:
                - Orchestration
                - orchestration.v1
    /api/payments/_info:
        get:
            operationId: getServerInfo
            responses:
                "200":
                    $ref: '#/components/responses/ServerInfo'
            summary: Get server info
            tags:
                - Payments
                - payments.v1
    /api/payments/accounts:
        get:
            operationId: listAccounts
            parameters:
                - $ref: '#/components/parameters/PageSize'
                - $ref: '#/components/parameters/Cursor'
                - $ref: '#/components/parameters/Sort'
            responses:
                "200":
                    $ref: '#/components/responses/Accounts'
            summary: List accounts
            tags:
                - Payments
                - payments.v1
    /api/payments/accounts/{accountId}:
        get:
            operationId: getAccount
            parameters:
                - $ref: '#/components/parameters/AccountId'
            responses:
                "200":
                    $ref: '#/components/responses/Account'
            summary: Get an account
            tags:
                - Payments
                - payments.v1
    /api/payments/accounts/{accountId}/balances:
        get:
            operationId: getAccountBalances
            parameters:
                - $ref: '#/components/parameters/AccountId'
                - description: The maximum number of results to return per page.
                  in: query
                  name: limit
                  schema:
                    format: int64
                    type: integer
                - description: |
                    Filter balances by currency.
                    If not specified, all account's balances will be returned.
                  in: query
                  name: asset
                  schema:
                    type: string
                - description: |
                    Filter balances by date.
                    If not specified, all account's balances will be returned.
                  in: query
                  name: from
                  schema:
                    format: date-time
                    type: string
                - description: |
                    Filter balances by date.
                    If not specified, default will be set to now.
                  in: query
                  name: to
                  schema:
                    format: date-time
                    type: string
                - $ref: '#/components/parameters/PageSize'
                - $ref: '#/components/parameters/Cursor'
                - $ref: '#/components/parameters/Sort'
            responses:
                "200":
                    $ref: '#/components/responses/AccountBalances'
            summary: Get account balances
            tags:
                - Payments
                - payments.v1
    /api/payments/bank-accounts:
        get:
            description: List all bank accounts created by user on Formance.
            operationId: listBankAccounts
            parameters:
                - $ref: '#/components/parameters/PageSize'
                - $ref: '#/components/parameters/Cursor'
                - $ref: '#/components/parameters/Sort'
            responses:
                "200":
                    $ref: '#/components/responses/BankAccounts'
            summary: List bank accounts created by user on Formance
            tags:
                - Payments
                - payments.v1
        post:
            description: Create a bank account in Payments and on the PSP.
            operationId: createBankAccount
            requestBody:
                $ref: '#/components/requestBodies/BankAccount'
            responses:
                "200":
                    $ref: '#/components/responses/BankAccount'
            summary: Create a BankAccount in Payments and on the PSP
            tags:
                - Payments
                - payments.v1
    /api/payments/bank-accounts/{bankAccountId}:
        get:
            operationId: getBankAccount
            parameters:
                - $ref: '#/components/parameters/BankAccountId'
            responses:
                "200":
                    $ref: '#/components/responses/BankAccount'
            summary: Get a bank account created by user on Formance
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors:
        get:
            description: List all installed connectors.
            operationId: listAllConnectors
            responses:
                "200":
                    $ref: '#/components/responses/Connectors'
            summary: List all installed connectors
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}:
        delete:
            deprecated: true
            description: Uninstall a connector by its name.
            operationId: uninstallConnector
            parameters:
                - $ref: '#/components/parameters/Connector'
            responses:
                "204":
                    $ref: '#/components/responses/NoContent'
            summary: Uninstall a connector
            tags:
                - Payments
                - payments.v1
        post:
            description: Install a connector by its name and config.
            operationId: installConnector
            parameters:
                - $ref: '#/components/parameters/Connector'
            requestBody:
                $ref: '#/components/requestBodies/ConnectorConfig'
            responses:
                "201":
                    $ref: '#/components/responses/ConnectorInstalled'
            summary: Install a connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/{connectorId}:
        delete:
            description: Uninstall a connector by its name.
            operationId: uninstallConnectorV1
            parameters:
                - $ref: '#/components/parameters/Connector'
                - $ref: '#/components/parameters/ConnectorID'
            responses:
                "204":
                    $ref: '#/components/responses/NoContent'
            summary: Uninstall a connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/{connectorId}/config:
        get:
            description: Read connector config
            operationId: readConnectorConfigV1
            parameters:
                - $ref: '#/components/parameters/Connector'
                - $ref: '#/components/parameters/ConnectorID'
            responses:
                "200":
                    $ref: '#/components/responses/ConnectorConfig'
            summary: Read the config of a connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/{connectorId}/reset:
        post:
            description: |
                Reset a connector by its name.
                It will remove the connector and ALL PAYMENTS generated with it.
            operationId: resetConnectorV1
            parameters:
                - $ref: '#/components/parameters/Connector'
                - $ref: '#/components/parameters/ConnectorID'
            responses:
                "204":
                    $ref: '#/components/responses/NoContent'
            summary: Reset a connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/{connectorId}/tasks:
        get:
            description: List all tasks associated with this connector.
            operationId: listConnectorTasksV1
            parameters:
                - $ref: '#/components/parameters/Connector'
                - $ref: '#/components/parameters/ConnectorID'
                - $ref: '#/components/parameters/PageSize'
                - $ref: '#/components/parameters/Cursor'
            responses:
                "200":
                    $ref: '#/components/responses/Tasks'
            summary: List tasks from a connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/{connectorId}/tasks/{taskId}:
        get:
            description: Get a specific task associated to the connector.
            operationId: getConnectorTaskV1
            parameters:
                - $ref: '#/components/parameters/Connector'
                - $ref: '#/components/parameters/ConnectorID'
                - $ref: '#/components/parameters/TaskId'
            responses:
                "200":
                    $ref: '#/components/responses/Task'
            summary: Read a specific task of the connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/config:
        get:
            deprecated: true
            description: Read connector config
            operationId: readConnectorConfig
            parameters:
                - $ref: '#/components/parameters/Connector'
            responses:
                "200":
                    $ref: '#/components/responses/ConnectorConfig'
            summary: Read the config of a connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/reset:
        post:
            deprecated: true
            description: |
                Reset a connector by its name.
                It will remove the connector and ALL PAYMENTS generated with it.
            operationId: resetConnector
            parameters:
                - $ref: '#/components/parameters/Connector'
            responses:
                "204":
                    $ref: '#/components/responses/NoContent'
            summary: Reset a connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/tasks:
        get:
            deprecated: true
            description: List all tasks associated with this connector.
            operationId: listConnectorTasks
            parameters:
                - $ref: '#/components/parameters/Connector'
                - $ref: '#/components/parameters/PageSize'
                - $ref: '#/components/parameters/Cursor'
            responses:
                "200":
                    $ref: '#/components/responses/Tasks'
            summary: List tasks from a connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/tasks/{taskId}:
        get:
            deprecated: true
            description: Get a specific task associated to the connector.
            operationId: getConnectorTask
            parameters:
                - $ref: '#/components/parameters/Connector'
                - $ref: '#/components/parameters/TaskId'
            responses:
                "200":
                    $ref: '#/components/responses/Task'
            summary: Read a specific task of the connector
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/{connector}/transfers:
        post:
            description: Execute a transfer between two accounts.
            operationId: connectorsTransfer
            parameters:
                - $ref: '#/components/parameters/Connector'
            requestBody:
                $ref: '#/components/requestBodies/Transfer'
            responses:
                "200":
                    $ref: '#/components/responses/Transfer'
            summary: Transfer funds between Connector accounts
            tags:
                - Payments
                - payments.v1
    /api/payments/connectors/configs:
        get:
            description: List the configs of each available connector.
            operationId: listConfigsAvailableConnectors
            responses:
                "200":
                    $ref: '#/components/responses/ConnectorsConfigs'
            summary: List the configs of each available connector
            tags:
                - Payments
                - payments.v1
    /api/payments/payments:
        get:
            operationId: listPayments
            parameters:
                - $ref: '#/components/parameters/PageSize'
                - $ref: '#/components/parameters/Cursor'
                - $ref: '#/components/parameters/Sort'
            responses:
                "200":
                    $ref: '#/components/responses/Payments'
            summary: List payments
            tags:
                - Payments
                - payments.v1
    /api/payments/payments/{paymentId}:
        get:
            operationId: getPayment
            parameters:
                - $ref: '#/components/parameters/PaymentId'
            responses:
                "200":
                    $ref: '#/components/responses/Payment'
            summary: Get a payment
            tags:
                - Payments
                - payments.v1
    /api/payments/payments/{paymentId}/metadata:
        patch:
            operationId: updateMetadata
            parameters:
                - $ref: '#/components/parameters/PaymentId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateMetadata'
            responses:
                "204":
                    $ref: '#/components/responses/NoContent'
            summary: Update metadata
            tags:
                - Payments
                - payments.v1
    /api/payments/transfer-initiations:
        get:
            operationId: listTransferInitiations
            parameters:
                - $ref: '#/components/parameters/PageSize'
                - $ref: '#/components/parameters/Cursor'
                - $ref: '#/components/parameters/Sort'
                - $ref: '#/components/parameters/Query'
            responses:
                "200":
                    $ref: '#/components/responses/TransferInitiations'
            summary: List Transfer Initiations
            tags:
                - Payments
                - payments.v1
        post:
            description: Create a transfer initiation
            operationId: createTransferInitiation
            requestBody:
                $ref: '#/components/requestBodies/TransferInitiation'
            responses:
                "200":
                    $ref: '#/components/responses/TransferInitiation'
            summary: Create a TransferInitiation
            tags:
                - Payments
                - payments.v1
    /api/payments/transfer-initiations/{transferId}:
        delete:
            description: Delete a transfer initiation by its id.
            operationId: deleteTransferInitiation
            parameters:
                - $ref: '#/components/parameters/TransferId'
            responses:
                "204":
                    $ref: '#/components/responses/NoContent'
            summary: Delete a transfer initiation
            tags:
                - Payments
                - payments.v1
        get:
            operationId: getTransferInitiation
            parameters:
                - $ref: '#/components/parameters/TransferId'
            responses:
                "200":
                    $ref: '#/components/responses/TransferInitiation'
            summary: Get a transfer initiation
            tags:
                - Payments
                - payments.v1
    /api/payments/transfer-initiations/{transferId}/retry:
        post:
            description: Retry a failed transfer initiation
            operationId: retryTransferInitiation
            parameters:
                - $ref: '#/components/parameters/TransferId'
            responses:
                "204":
                    $ref: '#/components/responses/NoContent'
            summary: Retry a failed transfer initiation
            tags:
                - Payments
                - payments.v1
    /api/payments/transfer-initiations/{transferId}/status:
        post:
            description: Update a transfer initiation status
            operationId: udpateTransferInitiationStatus
            parameters:
                - $ref: '#/components/parameters/TransferId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateTransferInitiationStatus'
            responses:
                "204":
                    $ref: '#/components/responses/NoContent'
            summary: Update the status of a transfer initiation
            tags:
                - Payments
                - payments.v1
    /api/search/:
        post:
            description: ElasticSearch query engine
            operationId: search
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Query'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Response'
                    description: Success
                default:
                    description: Error
            summary: Search
            tags:
                - Search
                - search.v1
    /api/search/_info:
        get:
            operationId: getServerInfo
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerInfo'
                    description: Server information
            summary: Get server info
            tags:
                - Search
                - search.v1
    /api/wallets/_info:
        get:
            operationId: getServerInfo
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerInfo'
                    description: Server information
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Get server info
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/holds:
        get:
            operationId: getHolds
            parameters:
                - description: The maximum number of results to return per page
                  example: 100
                  in: query
                  name: pageSize
                  schema:
                    default: 15
                    maximum: 1000
                    minimum: 1
                    type: integer
                - description: The wallet to filter on
                  example: wallet1
                  in: query
                  name: walletID
                  schema:
                    type: string
                - description: Filter holds by metadata key value pairs. Nested objects can be used as seen in the example below.
                  example:
                    admin: "true"
                  in: query
                  name: metadata
                  schema:
                    additionalProperties:
                        type: string
                    type: object
                  style: deepObject
                - description: |
                    Parameter used in pagination requests.
                    Set to the value of next for the next page of results.
                    Set to the value of previous for the previous page of results.
                    No other parameters can be set when the pagination token is set.
                  in: query
                  name: cursor
                  schema:
                    example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetHoldsResponse'
                    description: Holds
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Get all holds for a wallet
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/holds/{hold_id}/confirm:
        post:
            operationId: confirmHold
            parameters:
                - in: path
                  name: hold_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConfirmHoldRequest'
            responses:
                "204":
                    description: Hold successfully confirmed, funds moved back to initial destination
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Confirm a hold
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/holds/{hold_id}/void:
        parameters:
            - in: path
              name: hold_id
              required: true
              schema:
                type: string
        post:
            operationId: voidHold
            responses:
                "204":
                    description: Hold successfully cancelled, funds returned to wallet
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Cancel a hold
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/holds/{holdID}:
        get:
            operationId: getHold
            parameters:
                - description: The hold ID
                  in: path
                  name: holdID
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetHoldResponse'
                    description: Holds
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Get a hold
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/transactions:
        get:
            operationId: getTransactions
            parameters:
                - description: The maximum number of results to return per page
                  example: 100
                  in: query
                  name: pageSize
                  schema:
                    default: 15
                    maximum: 1000
                    minimum: 1
                    type: integer
                - description: A wallet ID to filter on
                  example: wallet1
                  in: query
                  name: walletID
                  schema:
                    type: string
                - description: |
                    Parameter used in pagination requests.
                    Set to the value of next for the next page of results.
                    Set to the value of previous for the previous page of results.
                    No other parameters can be set when the cursor is set.
                  in: query
                  name: cursor
                  schema:
                    example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetTransactionsResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/wallets:
        get:
            operationId: listWallets
            parameters:
                - description: Filter on wallet name
                  example: wallet1
                  in: query
                  name: name
                  schema:
                    type: string
                - description: Filter wallets by metadata key value pairs. Nested objects can be used as seen in the example below.
                  example:
                    admin: "true"
                  explode: true
                  in: query
                  name: metadata
                  schema:
                    additionalProperties:
                        type: string
                    type: object
                  style: deepObject
                - description: The maximum number of results to return per page
                  example: 100
                  in: query
                  name: pageSize
                  schema:
                    default: 15
                    maximum: 1000
                    minimum: 1
                    type: integer
                - description: |
                    Parameter used in pagination requests.
                    Set to the value of next for the next page of results.
                    Set to the value of previous for the previous page of results.
                    No other parameters can be set when the pagination token is set.
                  in: query
                  name: cursor
                  schema:
                    example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListWalletsResponse'
                    description: OK
            summary: List all wallets
            tags:
                - Wallets
                - wallets.v1
        post:
            operationId: createWallet
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateWalletRequest'
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateWalletResponse'
                    description: Wallet created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Create a new wallet
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/wallets/{id}:
        get:
            operationId: getWallet
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetWalletResponse'
                    description: Wallet
                "404":
                    description: Wallet not found
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Get a wallet
            tags:
                - Wallets
                - wallets.v1
        parameters:
            - in: path
              name: id
              required: true
              schema:
                type: string
        patch:
            operationId: updateWallet
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                metadata:
                                    additionalProperties:
                                        type: string
                                    description: Custom metadata to attach to this wallet.
                                    type: object
                            required:
                                - metadata
                            type: object
            responses:
                "204":
                    description: Wallet successfully updated
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Update a wallet
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/wallets/{id}/balances:
        get:
            operationId: listBalances
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListBalancesResponse'
                    description: Balances list
            summary: List balances of a wallet
            tags:
                - Wallets
                - wallets.v1
        parameters:
            - in: path
              name: id
              required: true
              schema:
                type: string
        post:
            operationId: createBalance
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateBalanceRequest'
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateBalanceResponse'
                    description: Created balance
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Create a balance
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/wallets/{id}/balances/{balanceName}:
        get:
            operationId: getBalance
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - in: path
                  name: balanceName
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetBalanceResponse'
                    description: Balance summary
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Get detailed balance
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/wallets/{id}/credit:
        parameters:
            - in: path
              name: id
              required: true
              schema:
                type: string
        post:
            operationId: creditWallet
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreditWalletRequest'
            responses:
                "204":
                    description: Wallet successfully credited
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Credit a wallet
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/wallets/{id}/debit:
        parameters:
            - in: path
              name: id
              required: true
              schema:
                type: string
        post:
            operationId: debitWallet
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DebitWalletRequest'
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DebitWalletResponse'
                    description: Wallet successfully debited as a pending hold
                "204":
                    description: Wallet successfully debited
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Debit a wallet
            tags:
                - Wallets
                - wallets.v1
    /api/wallets/wallets/{id}/summary:
        get:
            operationId: getWalletSummary
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetWalletSummaryResponse'
                    description: Wallet summary
                "404":
                    description: Wallet not found
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Get wallet summary
            tags:
                - Wallets
                - wallets.v1
        parameters:
            - in: path
              name: id
              required: true
              schema:
                type: string
    /api/webhooks/configs:
        get:
            description: Sorted by updated date descending
            operationId: getManyConfigs
            parameters:
                - description: Optional filter by Config ID
                  in: query
                  name: id
                  schema:
                    example: 4997257d-dfb6-445b-929c-cbe2ab182818
                    type: string
                - description: Optional filter by endpoint URL
                  in: query
                  name: endpoint
                  schema:
                    example: https://example.com
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConfigsResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Get many configs
            tags:
                - Webhooks
                - webhooks.v1
        post:
            description: |
                Insert a new webhooks config.

                The endpoint should be a valid https URL and be unique.

                The secret is the endpoint's verification secret.
                If not passed or empty, a secret is automatically generated.
                The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)

                All eventTypes are converted to lower-case when inserted.
            operationId: insertConfig
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConfigUser'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConfigResponse'
                    description: Config created successfully.
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Insert a new config
            tags:
                - Webhooks
                - webhooks.v1
    /api/webhooks/configs/{id}:
        delete:
            description: Delete a webhooks config by ID.
            operationId: deleteConfig
            parameters:
                - description: Config ID
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 4997257d-dfb6-445b-929c-cbe2ab182818
                    type: string
            responses:
                "200":
                    description: Config successfully deleted.
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Delete one config
            tags:
                - Webhooks
                - webhooks.v1
    /api/webhooks/configs/{id}/activate:
        put:
            description: Activate a webhooks config by ID, to start receiving webhooks to its endpoint.
            operationId: activateConfig
            parameters:
                - description: Config ID
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 4997257d-dfb6-445b-929c-cbe2ab182818
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConfigResponse'
                    description: Config successfully activated.
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Activate one config
            tags:
                - Webhooks
                - webhooks.v1
    /api/webhooks/configs/{id}/deactivate:
        put:
            description: Deactivate a webhooks config by ID, to stop receiving webhooks to its endpoint.
            operationId: deactivateConfig
            parameters:
                - description: Config ID
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 4997257d-dfb6-445b-929c-cbe2ab182818
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConfigResponse'
                    description: Config successfully deactivated.
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Deactivate one config
            tags:
                - Webhooks
                - webhooks.v1
    /api/webhooks/configs/{id}/secret/change:
        put:
            description: |
                Change the signing secret of the endpoint of a webhooks config.

                If not passed or empty, a secret is automatically generated.
                The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
            operationId: changeConfigSecret
            parameters:
                - description: Config ID
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 4997257d-dfb6-445b-929c-cbe2ab182818
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConfigChangeSecret'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConfigResponse'
                    description: Secret successfully changed.
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Change the signing secret of a config
            tags:
                - Webhooks
                - webhooks.v1
    /api/webhooks/configs/{id}/test:
        get:
            description: Test a config by sending a webhook to its endpoint.
            operationId: testConfig
            parameters:
                - description: Config ID
                  in: path
                  name: id
                  required: true
                  schema:
                    example: 4997257d-dfb6-445b-929c-cbe2ab182818
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AttemptResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Error
            summary: Test one config
            tags:
                - Webhooks
                - webhooks.v1
    /versions:
        get:
            operationId: getVersions
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetVersionsResponse'
                    description: OK
            summary: Show stack version information
servers:
    - description: local server
      url: http://localhost
x-tagGroups:
    - name: Auth
      tags:
        - Clients
        - Scopes
        - Users
        - Auth
    - name: Ledger
      tags:
        - Ledger
        - Server
        - Accounts
        - Mapping
        - Script
        - Stats
        - Transactions
        - Balances
        - server
        - accounts
        - mapping
        - script
        - stats
        - transactions
        - balances
    - name: Payments
      tags:
        - Payments
    - name: Search
      tags:
        - Search
    - name: Wallets
      tags:
        - Wallets
    - name: Webhooks
      tags:
        - Webhooks
    - name: Flows
      tags:
        - Orchestration
